--- a/gtk/gtkcontainer.c
+++ b/gtk/gtkcontainer.c
@@ -41,7 +41,7 @@
 #include <gobject/gobjectnotifyqueue.c>
 #include <gobject/gvaluecollector.h>
 #include "gtkalias.h"
-
+#include "gtkmenu.h"
 
 enum {
   ADD,
@@ -58,6 +58,13 @@
   PROP_CHILD
 };
 
+typedef struct
+{
+  GtkWidget *menu;
+  void *func;
+  GtkWidgetTapAndHoldFlags flags;
+} GtkContainerTAH;
+
 #define PARAM_SPEC_PARAM_ID(pspec)              ((pspec)->param_id)
 #define PARAM_SPEC_SET_PARAM_ID(pspec, id)      ((pspec)->param_id = (id))
 
@@ -100,6 +107,12 @@
 
 static gchar* gtk_container_child_default_composite_name (GtkContainer *container,
 							  GtkWidget    *child);
+static void     gtk_container_tap_and_hold_setup   (GtkWidget                *widget,
+						    GtkWidget                *menu,
+						    GtkCallback               func,
+						    GtkWidgetTapAndHoldFlags  flags);
+static void     gtk_container_tap_and_hold_setup_forall (GtkWidget       *widget,
+							 GtkContainerTAH *tah);
 
 /* GtkBuildable */
 static void gtk_container_buildable_init           (GtkBuildableIface *iface);
@@ -224,6 +237,12 @@
   widget_class->unmap = gtk_container_unmap;
   widget_class->focus = gtk_container_focus;
   
+  g_signal_override_class_closure (
+        g_signal_lookup ("tap-and-hold-setup", GTK_TYPE_WIDGET),
+        GTK_TYPE_CONTAINER,
+        g_cclosure_new (G_CALLBACK (gtk_container_tap_and_hold_setup),
+                        NULL, NULL));
+
   class->add = gtk_container_add_unimplemented;
   class->remove = gtk_container_remove_unimplemented;
   class->check_resize = gtk_container_real_check_resize;
@@ -1050,6 +1069,9 @@
   container->reallocate_redraws = FALSE;
 }
 
+static GSList *size_allocated_containers = NULL;
+static guint collect_size_allocated_containers = 0;
+
 static void
 gtk_container_destroy (GtkObject *object)
 {
@@ -1064,6 +1086,9 @@
       container->focus_child = NULL;
     }
 
+  size_allocated_containers =
+      g_slist_remove_all (size_allocated_containers, container);
+
   /* do this before walking child widgets, to avoid
    * removing children from focus chain one by one.
    */
@@ -1334,6 +1359,17 @@
   return GTK_IS_RESIZE_CONTAINER (widget) ? (GtkContainer*) widget : NULL;
 }
 
+void
+_gtk_container_post_size_allocate (GtkContainer *container)
+{
+  size_allocated_containers =
+      g_slist_prepend (size_allocated_containers, container);
+}
+
+static void
+container_scroll_focus_adjustments (GtkContainer *container,
+                                    gboolean resize_update);
+
 static gboolean
 gtk_container_idle_sizer (gpointer data)
 {
@@ -1354,7 +1390,49 @@
       g_slist_free_1 (slist);
 
       GTK_PRIVATE_UNSET_FLAG (widget, GTK_RESIZE_PENDING);
+      collect_size_allocated_containers++;
       gtk_container_check_resize (GTK_CONTAINER (widget));
+      collect_size_allocated_containers--;
+    }
+
+  /* adjust scroll position in all windows that recently resized a container */
+  if (collect_size_allocated_containers == 0)
+    {
+      GtkWidget *last = NULL;
+      GSList *current;
+
+      /* sort toplevels to allow deduping */
+      size_allocated_containers =
+          g_slist_sort (size_allocated_containers, g_direct_equal);
+      /* adjust focus position on toplevels */
+      for (current = size_allocated_containers; current;
+           current = current->next)
+        {
+          if (last != current->data) /* dedup toplevels */
+            {
+              last = current->data;
+
+              if (GTK_IS_WINDOW (current->data))
+                {
+                  GtkWidget *focus = GTK_WINDOW (current->data)->focus_widget;
+
+                  if (focus && !GTK_IS_CONTAINER (focus))
+                    focus = focus->parent;
+
+                  while (focus)
+                    {
+                      /* adjust all focus widget parents that could possibly
+                     * scroll
+                     */
+                      container_scroll_focus_adjustments (GTK_CONTAINER (focus),
+                                                          TRUE);
+                      focus = focus->parent;
+                    }
+                }
+            }
+        }
+      g_slist_free (size_allocated_containers);
+      size_allocated_containers = NULL;
     }
 
   gdk_window_process_all_updates ();
@@ -1753,7 +1831,12 @@
 	g_object_ref (container->focus_child);
     }
 
+  container_scroll_focus_adjustments (container, FALSE);
+}
 
+static void
+container_scroll_focus_adjustments (GtkContainer *container, gboolean resize_update)
+{
   /* check for h/v adjustments
    */
   if (container->focus_child)
@@ -1767,6 +1850,7 @@
       vadj = g_object_get_qdata (G_OBJECT (container), vadjustment_key_id);
       if (hadj || vadj) 
 	{
+	  gboolean valid_coordinates = FALSE;
 
 	  focus_child = container->focus_child;
 	  while (GTK_IS_CONTAINER (focus_child) && 
@@ -1775,17 +1859,39 @@
 	      focus_child = GTK_CONTAINER (focus_child)->focus_child;
 	    }
 	  
-	  gtk_widget_translate_coordinates (focus_child, container->focus_child, 
-					    0, 0, &x, &y);
+	  valid_coordinates =
+	      gtk_widget_translate_coordinates (focus_child,
+						container->focus_child,
+						0, 0, &x, &y);
 
 	   x += container->focus_child->allocation.x;
 	   y += container->focus_child->allocation.y;
 	  
 	  if (vadj)
-	    gtk_adjustment_clamp_page (vadj, y, y + focus_child->allocation.height);
+	    {
+	      /* When updating the adjustments as a result of container resize
+	       * (resize_update=TRUE) force the focused widget visible only if
+	       * it is smaller than the viewport. Otherwise the updates starts
+	       * to oscillate between two values (possibly HildonScrollArea is
+	       * causing that.) That should be enough for vkb resized dialogs.
+	       */
+	      if (valid_coordinates && !resize_update ||
+		  focus_child->allocation.height < vadj->page_size)
+		{
+		  gtk_adjustment_clamp_page (
+			vadj, y, y + focus_child->allocation.height);
+		}
+	    }
 	  
 	  if (hadj)
-	    gtk_adjustment_clamp_page (hadj, x, x + focus_child->allocation.width);
+	    {
+	      if (valid_coordinates && !resize_update ||
+		  focus_child->allocation.width < hadj->page_size)
+		{
+		  gtk_adjustment_clamp_page (
+			hadj, x, x + focus_child->allocation.width);
+		}
+	    }
 	}
     }
 }
@@ -2760,5 +2866,61 @@
     }
 }
 
+static void
+gtk_container_tap_and_hold_setup_forall (GtkWidget       *widget,
+                                         GtkContainerTAH *tah)
+{
+  gtk_widget_tap_and_hold_setup (widget, tah->menu, tah->func, tah->flags);
+}
+
+static void
+gtk_container_tap_and_hold_setup (GtkWidget                *widget,
+				  GtkWidget                *menu,
+				  GtkCallback               func,
+				  GtkWidgetTapAndHoldFlags  flags)
+{
+  GtkContainerTAH tah;
+  GValue instance_and_params[4] = { { 0, }, { 0, }, { 0, }, { 0, } };
+
+  g_return_if_fail (GTK_IS_WIDGET (widget));
+  g_return_if_fail (menu == NULL || GTK_IS_MENU (menu));
+
+  tah.menu = menu;
+  tah.func = func;
+  tah.flags = flags;
+
+  if (flags & GTK_TAP_AND_HOLD_NO_INTERNALS)
+    {
+      gtk_container_foreach (
+            GTK_CONTAINER (widget),
+            (GtkCallback)gtk_container_tap_and_hold_setup_forall, &tah);
+    }
+  else
+    {
+      gtk_container_forall (
+            GTK_CONTAINER (widget),
+            (GtkCallback)gtk_container_tap_and_hold_setup_forall, &tah);
+    }
+
+  g_value_init (&instance_and_params[0], GTK_TYPE_WIDGET);
+  g_value_set_object (&instance_and_params[0], widget);
+
+  g_value_init (&instance_and_params[1], GTK_TYPE_OBJECT);
+  g_value_set_object (&instance_and_params[1], menu);
+
+  g_value_init (&instance_and_params[2], G_TYPE_POINTER);
+  g_value_set_pointer (&instance_and_params[2], func);
+
+  g_value_init (&instance_and_params[3], G_TYPE_UINT);
+  g_value_set_uint (&instance_and_params[3], flags);
+
+  g_signal_chain_from_overridden (instance_and_params, NULL);
+
+  g_value_unset (&instance_and_params[0]);
+  g_value_unset (&instance_and_params[1]);
+  g_value_unset (&instance_and_params[2]);
+  g_value_unset (&instance_and_params[3]);
+}
+
 #define __GTK_CONTAINER_C__
 #include "gtkaliasdef.c"
--- a/gtk/gtkcontainer.h
+++ b/gtk/gtkcontainer.h
@@ -219,6 +219,7 @@
 					      GList            *children,
 					      GtkDirectionType  direction,
 					      GtkWidget        *old_focus);
+void _gtk_container_post_size_allocate (GtkContainer *container);
 
 #ifndef GTK_DISABLE_DEPRECATED
 #define	gtk_container_border_width		gtk_container_set_border_width
