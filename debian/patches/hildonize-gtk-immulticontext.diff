--- a/gtk/gtkimmulticontext.c
+++ b/gtk/gtkimmulticontext.c
@@ -88,11 +88,59 @@
 							     gint               n_chars,
 							     GtkIMMulticontext *multicontext);
 
-static const gchar *global_context_id = NULL;
+static gboolean hildon_gtk_im_multicontext_filter_event (GtkIMContext            *context,
+							 GdkEvent                *event);
+
+static void     gtk_im_multicontext_show                (GtkIMContext            *context);
+static void     gtk_im_multicontext_hide                (GtkIMContext            *context);
+
+static void     gtk_im_multicontext_notify              (GObject                 *object,
+                                                         GParamSpec              *pspec);
+
+static gboolean gtk_im_multicontext_has_selection_cb            (GtkIMContext                   *slave,
+                                                                 GtkIMMulticontext              *multicontext);
+static void     gtk_im_multicontext_clipboard_operation_cb      (GtkIMContext                   *slave,
+                                                                 GtkIMContextClipboardOperation  op,
+                                                                 GtkIMMulticontext              *multicontext);
+static void     gtk_im_multicontext_slave_input_mode_changed_cb (GtkIMContext                   *slave,
+                                                                 GParamSpec                     *pspec,
+                                                                 GtkIMMulticontext              *multicontext);
+static void     gtk_im_multicontext_slave_input_default_changed_cb (GtkIMContext                   *slave,
+                                                                    GParamSpec                     *pspec,
+                                                                    GtkIMMulticontext              *multicontext);
+
+static GtkIMContext *gtk_im_multicontext_get_slave (GtkIMMulticontext *multicontext);
 
 G_DEFINE_TYPE (GtkIMMulticontext, gtk_im_multicontext, GTK_TYPE_IM_CONTEXT)
 
 static void
+gtk_im_multicontext_set_property (GObject      *object,
+                                  guint         property_id,
+                                  const GValue *value,
+                                  GParamSpec   *pspec)
+{
+  GtkIMContext *slave = gtk_im_multicontext_get_slave (GTK_IM_MULTICONTEXT (object));
+  GParamSpec *param_spec;
+
+  param_spec = g_object_class_find_property (G_OBJECT_GET_CLASS (slave),
+                                             pspec->name);
+
+  if (param_spec != NULL)
+    g_object_set_property (G_OBJECT(slave), pspec->name, value);
+}
+
+static void
+gtk_im_multicontext_get_property (GObject    *object,
+                                  guint       property_id,
+                                  GValue     *value,
+                                  GParamSpec *pspec)
+{
+  GtkIMContext *slave = gtk_im_multicontext_get_slave (GTK_IM_MULTICONTEXT(object));
+
+  g_object_get_property (G_OBJECT (slave), pspec->name, value);
+}
+
+static void
 gtk_im_multicontext_class_init (GtkIMMulticontextClass *class)
 {
   GObjectClass *gobject_class = G_OBJECT_CLASS (class);
@@ -111,6 +159,15 @@
 
   gobject_class->finalize = gtk_im_multicontext_finalize;
 
+  im_context_class->filter_event = hildon_gtk_im_multicontext_filter_event;
+  im_context_class->show = gtk_im_multicontext_show;
+  im_context_class->hide = gtk_im_multicontext_hide;
+
+  gobject_class->notify = gtk_im_multicontext_notify;
+
+  gobject_class->set_property = gtk_im_multicontext_set_property;
+  gobject_class->get_property = gtk_im_multicontext_get_property;
+
   g_type_class_add_private (gobject_class, sizeof (GtkIMMulticontextPrivate));   
 }
 
@@ -157,7 +214,9 @@
 {
   GtkIMMulticontextPrivate *priv = multicontext->priv;
   gboolean need_preedit_changed = FALSE;
-  
+  HildonGtkInputMode input_mode;
+  HildonGtkInputMode input_default;
+
   if (multicontext->slave)
     {
       if (!finalizing)
@@ -176,9 +235,28 @@
 					    gtk_im_multicontext_commit_cb,
 					    multicontext);
 
+      g_signal_handlers_disconnect_by_func (multicontext->slave,
+                                            gtk_im_multicontext_retrieve_surrounding_cb,
+                                            multicontext);
+      g_signal_handlers_disconnect_by_func (multicontext->slave,
+                                            gtk_im_multicontext_delete_surrounding_cb,
+                                            multicontext);
+      g_signal_handlers_disconnect_by_func (multicontext->slave,
+                                            gtk_im_multicontext_has_selection_cb,
+                                            multicontext);
+      g_signal_handlers_disconnect_by_func (multicontext->slave,
+                                            gtk_im_multicontext_clipboard_operation_cb,
+                                            multicontext);
+      g_signal_handlers_disconnect_by_func (multicontext->slave,
+                                            gtk_im_multicontext_slave_input_mode_changed_cb,
+                                            multicontext);
+
       g_object_unref (multicontext->slave);
       multicontext->slave = NULL;
 
+      g_free (multicontext->context_id);
+      multicontext->context_id = NULL;
+
       if (!finalizing)
 	need_preedit_changed = TRUE;
     }
@@ -207,7 +285,28 @@
       g_signal_connect (multicontext->slave, "delete-surrounding",
 			G_CALLBACK (gtk_im_multicontext_delete_surrounding_cb),
 			multicontext);
-      
+
+      g_signal_connect (multicontext->slave, "has-selection",
+                        G_CALLBACK (gtk_im_multicontext_has_selection_cb),
+                        multicontext);
+      g_signal_connect (multicontext->slave, "clipboard-operation",
+                        G_CALLBACK (gtk_im_multicontext_clipboard_operation_cb),
+                        multicontext);
+      g_signal_connect (multicontext->slave, "notify::hildon-input-mode",
+                        G_CALLBACK (gtk_im_multicontext_slave_input_mode_changed_cb),
+                        multicontext);
+      g_signal_connect (multicontext->slave, "notify::hildon-input-default",
+                        G_CALLBACK (gtk_im_multicontext_slave_input_default_changed_cb),
+                        multicontext);
+
+      g_object_get(multicontext, "hildon-input-mode", &input_mode, NULL);
+      g_object_set(multicontext->slave, "hildon-input-mode", input_mode, NULL);
+
+      g_object_get(multicontext, "hildon-input-default",
+                   &input_default, NULL);
+      g_object_set(multicontext->slave, "hildon-input-default",
+                   input_default, NULL);
+
       if (!priv->use_preedit)	/* Default is TRUE */
 	gtk_im_context_set_use_preedit (slave, FALSE);
       if (priv->client_window)
@@ -222,31 +321,53 @@
     g_signal_emit_by_name (multicontext, "preedit-changed");
 }
 
-static const gchar *
+static gchar *
 get_effective_context_id (GtkIMMulticontext *multicontext)
 {
-  if (multicontext->priv->context_id)
-    return multicontext->priv->context_id;
+  gint actual_format, actual_length;
+  gchar *context_id;
+  GdkAtom atom, type, actual_type;
+  gboolean succeeded;
+
+  atom = gdk_atom_intern ("gtk-global-immodule", FALSE);
+  type = gdk_atom_intern ("STRING", FALSE);
+
+  succeeded = gdk_property_get (gdk_screen_get_root_window (gdk_screen_get_default ()),
+                                atom,
+                                type,
+                                0,
+                                G_MAXLONG,
+                                FALSE,
+                                &actual_type,
+                                &actual_format,
+                                &actual_length,
+                                (guchar **) &context_id);
+  if (succeeded)
+    return context_id;
 
-  if (!global_context_id)
-    global_context_id = _gtk_im_module_get_default_context_id (multicontext->priv->client_window);
+  if (multicontext->priv->context_id)
+    return g_strdup(multicontext->priv->context_id);
 
-  return global_context_id;
+  return g_strdup(_gtk_im_module_get_default_context_id (multicontext->priv->client_window));
 }
 
 static GtkIMContext *
 gtk_im_multicontext_get_slave (GtkIMMulticontext *multicontext)
 {
-  if (g_strcmp0 (multicontext->context_id, get_effective_context_id (multicontext)) != 0)
+  gchar *context_id = get_effective_context_id (multicontext);
+
+  if (g_strcmp0 (multicontext->context_id, context_id) != 0)
     gtk_im_multicontext_set_slave (multicontext, NULL, FALSE);
 
+  g_free(context_id);
+
   if (!multicontext->slave)
     {
       GtkIMContext *slave;
 
       g_free (multicontext->context_id);
 
-      multicontext->context_id = g_strdup (get_effective_context_id (multicontext));
+      multicontext->context_id = get_effective_context_id (multicontext);
 
       if (g_strcmp0 (multicontext->context_id, NONE_ID) == 0)
         return NULL;
@@ -263,7 +384,6 @@
 im_module_setting_changed (GtkSettings *settings, 
                            gpointer     data)
 {
-  global_context_id = NULL;
 }
 
 
@@ -292,8 +412,6 @@
                             G_CALLBACK (im_module_setting_changed), NULL);
           g_object_set_data (G_OBJECT (settings), "gtk-im-module-connected",
                              GINT_TO_POINTER (TRUE));
-
-          global_context_id = NULL;
         }
     }
 
@@ -354,6 +472,19 @@
   return FALSE;
 }
 
+static gboolean
+hildon_gtk_im_multicontext_filter_event (GtkIMContext *context,
+                                         GdkEvent *event)
+{
+  GtkIMMulticontext *multicontext = GTK_IM_MULTICONTEXT (context);
+  GtkIMContext *slave = gtk_im_multicontext_get_slave (multicontext);
+
+  if (slave)
+    return hildon_gtk_im_context_filter_event (slave, event);
+  else
+    return FALSE;
+}
+
 static void
 gtk_im_multicontext_focus_in (GtkIMContext   *context)
 {
@@ -452,6 +583,45 @@
 }
 
 static void
+gtk_im_multicontext_notify (GObject      *object,
+                            GParamSpec   *pspec)
+{
+  GtkIMMulticontext *multicontext = GTK_IM_MULTICONTEXT (object);
+  HildonGtkInputMode input_mode_slave, input_mode_multi;
+
+  if (multicontext->slave != NULL &&
+      strcmp (pspec->name, "hildon-input-mode") == 0)
+    {
+      g_object_get (multicontext->slave,
+                    "hildon-input-mode", &input_mode_slave,
+                    NULL);
+      g_object_get (multicontext,
+                    "hildon-input-mode", &input_mode_multi,
+                    NULL);
+
+      /* don't change without comparing, or we'll get to infinite loop */
+      if (input_mode_slave != input_mode_multi)
+        g_object_set (multicontext->slave,
+                      "hildon-input-mode", input_mode_multi,
+                      NULL);
+
+      /* and the same for hildon-input-default: */
+      g_object_get (multicontext->slave,
+                    "hildon-input-default", &input_mode_slave,
+                    NULL);
+      g_object_get (multicontext,
+                    "hildon-input-default", &input_mode_multi,
+                    NULL);
+
+      /* don't change without comparing, or we'll get to infinite loop */
+      if (input_mode_slave != input_mode_multi)
+        g_object_set (multicontext->slave,
+                      "hildon-input-default", input_mode_multi,
+                      NULL);
+    }
+}
+
+static void
 gtk_im_multicontext_preedit_start_cb   (GtkIMContext      *slave,
 					GtkIMMulticontext *multicontext)
 {
@@ -505,15 +675,65 @@
   return result;
 }
 
+static gboolean
+gtk_im_multicontext_has_selection_cb (GtkIMContext      *slave,
+                                      GtkIMMulticontext *multicontext)
+{
+  gboolean result;
+
+  g_signal_emit_by_name (multicontext, "has_selection",
+                         &result);
+
+  return result;
+}
+
+static void
+gtk_im_multicontext_clipboard_operation_cb (GtkIMContext                   *slave,
+                                            GtkIMContextClipboardOperation  op,
+                                            GtkIMMulticontext              *multicontext)
+{
+  g_signal_emit_by_name (multicontext, "clipboard_operation", op);
+}
+
+static void
+gtk_im_multicontext_slave_input_mode_changed_cb (GtkIMContext      *slave,
+                                                 GParamSpec        *pspec,
+                                                 GtkIMMulticontext *multicontext)
+{
+  HildonGtkInputMode input_mode_slave, input_mode_multi;
+
+  g_object_get (slave, "hildon-input-mode", &input_mode_slave, NULL);
+  g_object_get (multicontext, "hildon-input-mode", &input_mode_multi, NULL);
+
+  /* don't change without comparing, or we'll get to infinite loop */
+  if (input_mode_slave != input_mode_multi)
+    g_object_set (multicontext, "hildon-input-mode", input_mode_slave, NULL);
+}
+
+void
+gtk_im_multicontext_slave_input_default_changed_cb (GtkIMContext      *slave,
+                                                    GParamSpec        *pspec,
+                                                    GtkIMMulticontext *multicontext)
+{
+  HildonGtkInputMode input_default_slave, input_default_multi;
+
+  g_object_get (slave, "hildon-input-default", &input_default_slave, NULL);
+  g_object_get (multicontext, "hildon-input-default",
+                &input_default_multi, NULL);
+
+  /* don't change without comparing, or we'll get to infinite loop */
+  if (input_default_slave != input_default_multi)
+    g_object_set (multicontext, "hildon-input-default",
+                  input_default_slave, NULL);
+}
+
 static void
 activate_cb (GtkWidget         *menuitem,
 	     GtkIMMulticontext *context)
 {
   if (GTK_CHECK_MENU_ITEM (menuitem)->active)
     {
-      const gchar *id = g_object_get_data (G_OBJECT (menuitem), "gtk-context-id");
-
-      gtk_im_multicontext_set_context_id (context, id);
+      gtk_im_multicontext_set_context_id (context, NULL);
     }
 }
 
@@ -669,6 +889,43 @@
   g_free (contexts);
 }
 
+static void
+gtk_im_multicontext_show (GtkIMContext *context)
+{
+  GtkIMMulticontext *multicontext = GTK_IM_MULTICONTEXT (context);
+  GtkIMContext *slave;
+  gchar *context_id = get_effective_context_id (multicontext);
+
+  /* If the global context type is different from the context we were
+   * using before, get rid of the old slave and create a new one
+   * for the new global context type.
+   */
+  if (!multicontext->context_id ||
+      strcmp (context_id, multicontext->context_id) != 0)
+    gtk_im_multicontext_set_slave (multicontext, NULL, FALSE);
+
+  slave = gtk_im_multicontext_get_slave (multicontext);
+
+  multicontext->priv->focus_in = TRUE;
+
+  if (slave)
+    gtk_im_context_show (slave);
+
+  g_free (context_id);
+}
+
+static void
+gtk_im_multicontext_hide (GtkIMContext *context)
+{
+  GtkIMMulticontext *multicontext = GTK_IM_MULTICONTEXT (context);
+  GtkIMContext *slave = gtk_im_multicontext_get_slave (multicontext);
+
+  multicontext->priv->focus_in = FALSE;
+
+  if (slave)
+    gtk_im_context_hide (slave);
+}
+
 /**
  * gtk_im_multicontext_get_context_id:
  * @context: a #GtkIMMulticontext
