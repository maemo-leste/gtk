--- a/gtk/gtkrbtree.c
+++ b/gtk/gtkrbtree.c
@@ -335,6 +335,7 @@
   retval = g_new (GtkRBTree, 1);
   retval->parent_tree = NULL;
   retval->parent_node = NULL;
+  retval->base_offset = 0;
 
   retval->nil = g_slice_new (GtkRBNode);
   retval->nil->left = NULL;
@@ -962,6 +963,7 @@
 {
   GtkRBNode *last;
   gint retval;
+  GtkRBTree *origtree = tree;
 
   g_assert (node);
   g_assert (node->left);
@@ -987,7 +989,11 @@
 	    retval += node->left->offset + GTK_RBNODE_GET_HEIGHT (node);
 	}
     }
-  return retval;
+
+  while (origtree->parent_tree)
+    origtree = origtree->parent_tree;
+
+  return retval + origtree->base_offset;
 }
 
 gint
@@ -1095,6 +1101,11 @@
 {
   g_assert (tree);
 
+  /* We (ab)use the fact that "tree" that is passed in is always
+   * the root.
+   */
+  height -= tree->base_offset;
+
   if ((height < 0) ||
       (height >= tree->root->offset))
     {
@@ -1411,6 +1422,13 @@
   return depth;
 }
 
+void
+_gtk_rbtree_set_base_offset (GtkRBTree *tree,
+			     short      base_offset)
+{
+  tree->base_offset = base_offset;
+}
+
 static void
 _gtk_rbtree_traverse_pre_order (GtkRBTree             *tree,
 				GtkRBNode             *node,
--- a/gtk/gtkrbtree.h
+++ b/gtk/gtkrbtree.h
@@ -64,6 +64,7 @@
   GtkRBNode *nil;
   GtkRBTree *parent_tree;
   GtkRBNode *parent_node;
+  short base_offset;
 };
 
 struct _GtkRBNode
@@ -170,6 +171,9 @@
 
 gint       _gtk_rbtree_get_depth        (GtkRBTree              *tree);
 
+void       _gtk_rbtree_set_base_offset  (GtkRBTree              *tree,
+					 short base_offset);
+
 /* This func checks the integrity of the tree */
 #ifdef G_ENABLE_DEBUG  
 void       _gtk_rbtree_test             (const gchar            *where,
