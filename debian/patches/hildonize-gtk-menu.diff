--- a/gtk/gtkmenu.c
+++ b/gtk/gtkmenu.c
@@ -27,6 +27,8 @@
 #define GTK_MENU_INTERNALS
 #include "config.h"
 #include <string.h>
+#include <math.h>
+#include <stdlib.h>
 #include "gdk/gdkkeysyms.h"
 #include "gtkaccellabel.h"
 #include "gtkaccelmap.h"
@@ -36,6 +38,7 @@
 #include "gtkmain.h"
 #include "gtkmarshalers.h"
 #include "gtkmenu.h"
+#include "gtkmenubar.h"
 #include "gtktearoffmenuitem.h"
 #include "gtkwindow.h"
 #include "gtkhbox.h"
@@ -56,6 +59,8 @@
 #define MENU_SCROLL_TIMEOUT1  50
 #define MENU_SCROLL_TIMEOUT2  20
 
+#define SCROLL_DELAY_FACTOR 5 /* Scroll repeat multiplier */
+
 #define ATTACH_INFO_KEY "gtk-menu-child-attach-info-key"
 #define ATTACHED_MENUS "gtk-attached-menus"
 
@@ -101,6 +106,14 @@
   guint have_position         : 1;
   guint ignore_button_release : 1;
   guint no_toggle_size        : 1;
+
+  /* For context menu behavior */
+  gboolean context_menu;
+  int popup_pointer_x;
+  int popup_pointer_y;
+
+  /* Handling GdkScreen::size-changed */
+  guint size_changed_id;
 };
 
 typedef struct
@@ -254,6 +267,11 @@
 
 static guint menu_signals[LAST_SIGNAL] = { 0 };
 
+static gint context_menu_counter = 0;
+
+static void menu_screen_size_changed (GdkScreen *screen,
+                                      GtkMenu *menu);
+
 static GtkMenuPrivate *
 gtk_menu_get_private (GtkMenu *menu)
 {
@@ -670,6 +688,42 @@
                                                               GTK_ARROWS_BOTH,
                                                               GTK_PARAM_READABLE));
 
+  gtk_widget_class_install_style_property (widget_class,
+                                           g_param_spec_boolean ("opposite-arrows",
+                                                                 P_("Opposite Arrows"),
+                                                                 P_("Place the scroll arrows on opposite sides of the menu."),
+                                                                 FALSE,
+                                                                 GTK_PARAM_READABLE));
+  /**
+   * GtkMenuItem::arrow-scaling
+   *
+   * Arbitrary constant to scale down the size of the scroll arrow.
+   *
+   * Since: maemo 4.0
+   * Stability: Unstable
+   */
+  gtk_widget_class_install_style_property (widget_class,
+                                           g_param_spec_float ("maemo-arrow-scaling",
+                                                               P_("Arrow Scaling"),
+                                                               P_("Amount of space used up by the scroll arrows, relative to scroll-arrow-vlength"),
+                                                               0.0, 1.0, 0.7,
+                                                               GTK_PARAM_READABLE));
+
+  /**
+   * GtkMenu::maemo-decorated
+   *
+   * Whether the menu window is decorated by the window manager.
+   *
+   * Since: maemo 5.0
+   * Stability: Unstable
+   */
+  gtk_widget_class_install_style_property (widget_class,
+                                           g_param_spec_boolean ("maemo-decorated",
+                                                                 P_("Decorated"),
+                                                                 P_("Whether the menu window is decorated by the window manager"),
+                                                                 TRUE,
+                                                                 GTK_PARAM_READABLE));
+
  gtk_container_class_install_child_property (container_class,
                                              CHILD_PROP_LEFT_ATTACH,
 					      g_param_spec_int ("left-attach",
@@ -713,7 +767,7 @@
                                            g_param_spec_float ("arrow-scaling",
                                                                P_("Arrow Scaling"),
                                                                P_("Arbitrary constant to scale down the size of the scroll arrow"),
-                                                               0.0, 1.0, 0.7,
+                                                               0.0, 1.0, 1.0,
                                                                GTK_PARAM_READABLE));
 
   binding_set = gtk_binding_set_by_class (class);
@@ -971,6 +1025,28 @@
     case GDK_KEY_RELEASE:
       handled = gtk_widget_event (menu, event);
       break;
+    case GDK_CLIENT_EVENT:
+      /* Close down the whole hierarchy, but not if we're torn off. Don't call
+       * cancel if the menu isn't visible to avoid extra selection-done
+       * signals.
+       */
+      if (event->client.message_type == gdk_atom_intern_static_string ("_GTK_DELETE_TEMPORARIES") &&
+          _gtk_window_is_on_client_data (GTK_WINDOW (window), (GdkEventClient*)event) == FALSE &&
+          window == GTK_MENU (menu)->toplevel &&
+          gtk_widget_get_mapped (GTK_MENU (menu)->toplevel))
+        {
+          gtk_menu_shell_cancel (GTK_MENU_SHELL (menu));
+          handled = TRUE;
+        }
+      break;
+    case GDK_DELETE:
+      if (window == GTK_MENU (menu)->toplevel &&
+          gtk_widget_get_mapped (GTK_MENU (menu)->toplevel))
+        {
+          gtk_menu_shell_cancel (GTK_MENU_SHELL (menu));
+          handled = TRUE;
+        }
+      break;
     default:
       break;
     }
@@ -1007,6 +1083,7 @@
 gtk_menu_init (GtkMenu *menu)
 {
   GtkMenuPrivate *priv = gtk_menu_get_private (menu);
+  gboolean decorated = TRUE;
 
   menu->parent_menu_item = NULL;
   menu->old_active_menu_item = NULL;
@@ -1016,7 +1093,7 @@
   menu->toggle_size = 0;
 
   menu->toplevel = g_object_connect (g_object_new (GTK_TYPE_WINDOW,
-						   "type", GTK_WINDOW_POPUP,
+                                                   "type", GTK_WINDOW_TOPLEVEL,
 						   "child", menu,
 						   NULL),
 				     "signal::event", gtk_menu_window_event, menu,
@@ -1026,6 +1103,11 @@
   gtk_window_set_resizable (GTK_WINDOW (menu->toplevel), FALSE);
   gtk_window_set_mnemonic_modifier (GTK_WINDOW (menu->toplevel), 0);
 
+  gtk_widget_style_get (GTK_WIDGET (menu), "maemo-decorated", &decorated, NULL);
+  gtk_window_set_decorated (GTK_WINDOW (menu->toplevel), decorated);
+  gtk_widget_add_events (menu->toplevel, GDK_VISIBILITY_NOTIFY_MASK);
+  gtk_window_set_is_temporary (GTK_WINDOW (menu->toplevel), TRUE);
+
   /* Refloat the menu, so that reference counting for the menu isn't
    * affected by it being a child of the toplevel
    */
@@ -1055,6 +1137,14 @@
   priv->upper_arrow_state = GTK_STATE_NORMAL;
   priv->lower_arrow_state = GTK_STATE_NORMAL;
 
+  priv->context_menu = FALSE;
+  priv->popup_pointer_x = -1;
+  priv->popup_pointer_y = -1;
+
+  priv->size_changed_id =
+      g_signal_connect (gtk_widget_get_screen (menu->toplevel), "size_changed",
+                        G_CALLBACK (menu_screen_size_changed), menu);
+
   priv->have_layout = FALSE;
   priv->monitor_num = -1;
 }
@@ -1113,10 +1203,24 @@
       priv->title = NULL;
     }
 
+  if (priv->size_changed_id)
+    {
+      g_signal_handler_disconnect (gtk_widget_get_screen (GTK_WIDGET (object)),
+                                   priv->size_changed_id);
+      priv->size_changed_id = 0;
+    }
+
   GTK_OBJECT_CLASS (gtk_menu_parent_class)->destroy (object);
 }
 
 static void
+menu_screen_size_changed (GdkScreen *screen,
+                          GtkMenu   *menu)
+{
+  gtk_menu_shell_cancel (GTK_MENU_SHELL (menu));
+}
+
+static void
 menu_change_screen (GtkMenu   *menu,
 		    GdkScreen *new_screen)
 {
@@ -1128,6 +1232,13 @@
 	return;
     }
 
+  if (private->size_changed_id)
+    {
+      g_signal_handler_disconnect (gtk_widget_get_screen (GTK_WIDGET (menu)),
+                                   private->size_changed_id);
+      private->size_changed_id = 0;
+    }
+
   if (menu->torn_off)
     {
       gtk_window_set_screen (GTK_WINDOW (menu->tearoff_window), new_screen);
@@ -1136,6 +1247,10 @@
 
   gtk_window_set_screen (GTK_WINDOW (menu->toplevel), new_screen);
   private->monitor_num = -1;
+
+  private->size_changed_id =
+      g_signal_connect (new_screen, "size_changed",
+                        G_CALLBACK (menu_screen_size_changed), menu);
 }
 
 static void
@@ -1384,6 +1499,54 @@
   return FALSE;
 }
 
+#define HILDON_MENU_NAME_SHARP                  "menu_with_corners"
+/* needed to allow different themeing for first level menus */
+#define HILDON_MENU_NAME_ROUND_FIRST_LEVEL      "menu_without_corners_first_level"
+#define HILDON_MENU_NAME_ROUND                  "menu_without_corners"
+#define HILDON_MENU_NAME_FORCE_SHARP            "menu_force_with_corners"
+#define HILDON_MENU_NAME_FORCE_ROUND            "menu_force_without_corners"
+
+/**
+ * Little help function for making some sanity tests on this menu.
+ * Checks that given widget really is a menu and that it has no name
+ * assigned to it yet.
+ * Names used to do hildon theming:
+ * HILDON_MENU_NAME_SHARP for menu with sharp upper corners
+ * HILDON_MENU_NAME_ROUND for menu with round corners
+ */
+static gboolean
+maemo_menu_check_name (GtkWidget *widget)
+{
+  gboolean legal_name = FALSE;
+  gchar **tmp = NULL;
+  const gchar *name = NULL;
+  static gchar *menu_names[] = { "GtkMenu",
+                                 HILDON_MENU_NAME_SHARP,
+                                 HILDON_MENU_NAME_ROUND,
+                                 HILDON_MENU_NAME_ROUND_FIRST_LEVEL,
+                                 NULL };
+  if (GTK_IS_MENU (widget) &&
+      (name = gtk_widget_get_name (widget)))
+    {
+      if (!g_ascii_strcasecmp (name, HILDON_MENU_NAME_FORCE_SHARP) ||
+          !g_ascii_strcasecmp (name, HILDON_MENU_NAME_FORCE_ROUND))
+        {
+          return FALSE;
+        }
+
+      for (tmp = menu_names; *tmp; tmp++)
+        {
+          if (!g_ascii_strcasecmp (name, *tmp ))
+            {
+              legal_name = TRUE;
+              break;
+            }
+        }
+    }
+
+  return legal_name;
+}
+
 /**
  * gtk_menu_popup:
  * @menu: a #GtkMenu.
@@ -1487,6 +1650,16 @@
     {
       if (popup_grab_on_window (xgrab_shell->window, activate_time, grab_keyboard))
 	GTK_MENU_SHELL (xgrab_shell)->have_xgrab = TRUE;
+      /* Maemo: enable rc-file theming */
+      if (maemo_menu_check_name (widget))
+        {
+          if (GTK_IS_MENU_BAR (parent_menu_shell))
+            gtk_widget_set_name (widget, HILDON_MENU_NAME_SHARP);
+          else if (GTK_IS_MENU (parent_menu_shell))
+            gtk_widget_set_name( widget, HILDON_MENU_NAME_ROUND);
+          else
+            gtk_widget_set_name (widget, HILDON_MENU_NAME_ROUND_FIRST_LEVEL);
+        }
     }
   else
     {
@@ -1496,6 +1669,10 @@
       transfer_window = menu_grab_transfer_window_get (menu);
       if (popup_grab_on_window (transfer_window, activate_time, grab_keyboard))
 	GTK_MENU_SHELL (xgrab_shell)->have_xgrab = TRUE;
+
+      /* Maemo: enable rc-file theming */
+      if (maemo_menu_check_name (widget))
+        gtk_widget_set_name (widget, HILDON_MENU_NAME_ROUND_FIRST_LEVEL);
     }
 
   if (!GTK_MENU_SHELL (xgrab_shell)->have_xgrab)
@@ -1585,18 +1762,14 @@
 
   gtk_menu_scroll_to (menu, menu->scroll_offset);
 
-  /* if no item is selected, select the first one */
-  if (!menu_shell->active_menu_item)
-    {
-      gboolean touchscreen_mode;
-
-      g_object_get (gtk_widget_get_settings (GTK_WIDGET (menu)),
-                    "gtk-touchscreen-mode", &touchscreen_mode,
-                    NULL);
+  /* Hildon: save position of the pointer during popup. Not multihead safe. */
+  priv->context_menu = (context_menu_counter > 0) && !parent_menu_item;
 
-      if (touchscreen_mode)
-        gtk_menu_shell_select_first (menu_shell, TRUE);
-    }
+  if (priv->context_menu)
+    gdk_display_get_pointer (gtk_widget_get_display (widget), NULL,
+                             &priv->popup_pointer_x,
+                             &priv->popup_pointer_y,
+                             NULL);
 
   /* Once everything is set up correctly, map the toplevel window on
      the screen.
@@ -1636,6 +1809,7 @@
   menu_shell->ignore_enter = FALSE;
 
   private->have_position = FALSE;
+  private->context_menu = FALSE;
 
   gtk_menu_stop_scrolling (menu);
   
@@ -2229,12 +2403,17 @@
 {
   guint scroll_arrow_height;
   GtkArrowPlacement arrow_placement;
+  gboolean opposite_arrows;
 
   gtk_widget_style_get (GTK_WIDGET (menu),
                         "scroll-arrow-vlength", &scroll_arrow_height,
                         "arrow_placement", &arrow_placement,
+                        "opposite-arrows", &opposite_arrows,
                         NULL);
 
+  if (opposite_arrows)
+    arrow_placement = GTK_ARROWS_BOTH;
+
   switch (arrow_placement)
     {
     case GTK_ARROWS_BOTH:
@@ -2710,12 +2889,14 @@
   guint horizontal_padding;
   gint scroll_arrow_height;
   GtkArrowPlacement arrow_placement;
+  gboolean opposite_arrows;
 
   gtk_widget_style_get (widget,
                         "vertical-padding", &vertical_padding,
                         "horizontal-padding", &horizontal_padding,
                         "scroll-arrow-vlength", &scroll_arrow_height,
                         "arrow-placement", &arrow_placement,
+                        "opposite-arrows", &opposite_arrows,
                         NULL);
 
   border->x = GTK_CONTAINER (widget)->border_width + widget->style->xthickness + horizontal_padding;
@@ -2723,6 +2904,9 @@
   border->width = gdk_window_get_width (widget->window);
   border->height = gdk_window_get_height (widget->window);
 
+  if (opposite_arrows)
+    arrow_placement = GTK_ARROWS_BOTH;
+
   switch (arrow_placement)
     {
     case GTK_ARROWS_BOTH:
@@ -2796,6 +2980,9 @@
       gtk_widget_style_get (widget, "arrow-scaling", &arrow_scaling, NULL);
       arrow_size = arrow_scaling * arrow_space;
 
+      gtk_widget_style_get (widget, "maemo-arrow-scaling", &arrow_scaling, NULL);
+      arrow_size *= arrow_scaling;
+
       gtk_paint_box (widget->style,
 		     widget->window,
 		     GTK_STATE_NORMAL,
@@ -2900,6 +3087,27 @@
   GTK_WIDGET_CLASS (gtk_menu_parent_class)->show (widget);
 }
 
+static gint
+distance_traveled (GtkWidget *widget)
+{
+  GtkMenuPrivate *priv;
+  GdkScreen *screen;
+  GdkDisplay *display;
+  gint x, y, dx, dy;
+
+  priv = gtk_menu_get_private (GTK_MENU (widget));
+
+  screen = gtk_widget_get_screen (widget);
+  display = gdk_screen_get_display (screen);
+
+  gdk_display_get_pointer (display, NULL, &x, &y, NULL);
+
+  dx = (priv->popup_pointer_x - x);
+  dy = (priv->popup_pointer_y - y);
+
+  return abs ((int) sqrt ((double) (dx * dx + dy * dy)));
+}
+
 static gboolean
 gtk_menu_button_scroll (GtkMenu        *menu,
                         GdkEventButton *event)
@@ -2983,6 +3191,7 @@
 			 GdkEventButton *event)
 {
   GtkMenuPrivate *priv = gtk_menu_get_private (GTK_MENU (widget));
+  GtkWidget *menu_item;
 
   if (priv->ignore_button_release)
     {
@@ -3001,18 +3210,35 @@
   /*  Don't pass down to menu shell if a non-menuitem part of the menu
    *  was clicked (see comment in button_press()).
    */
-  if (GTK_IS_MENU_SHELL (gtk_get_event_widget ((GdkEvent *) event)) &&
-      pointer_in_menu_window (widget, event->x_root, event->y_root))
+  menu_item = gtk_get_event_widget ((GdkEvent*) event);
+  if (!GTK_IS_MENU_ITEM (menu_item) ||
+      !GTK_IS_MENU (menu_item->parent))
     {
-      /*  Ugly: make sure menu_shell->button gets reset to 0 when we
-       *  bail out early here so it is in a consistent state for the
-       *  next button_press/button_release in GtkMenuShell.
-       *  See bug #449371.
-       */
-      if (GTK_MENU_SHELL (widget)->active)
-        GTK_MENU_SHELL (widget)->button = 0;
+      if (priv->context_menu &&
+          (priv->popup_pointer_x >= 0) &&
+          (priv->popup_pointer_y >= 0))
+        {
+          gint threshold;
+          gint distance;
 
-      return TRUE;
+          g_object_get (gtk_widget_get_settings (widget),
+                        "gtk-dnd-drag-threshold", &threshold,
+                        NULL);
+
+          distance = distance_traveled (widget);
+
+          priv->popup_pointer_x = -1;
+          priv->popup_pointer_y = -1;
+
+          /*  Don't popdown if we traveled less than DND threshold
+           *  since popup point, as per the Nokia 770 specs.
+           */
+          if (distance < threshold)
+            return TRUE;
+        }
+
+      if (pointer_in_menu_window (widget, event->x_root, event->y_root))
+        return TRUE;
     }
 
   return GTK_WIDGET_CLASS (gtk_menu_parent_class)->button_release_event (widget, event);
@@ -3192,7 +3418,33 @@
 	    }
 	}
     }
-  
+  else if (!can_change_accels)
+    {
+      GtkWidget *toplevel = gtk_menu_get_toplevel (widget);
+
+      if (toplevel)
+        {
+          GSList *accel_groups;
+          GSList *list;
+
+          accel_groups = gtk_accel_groups_from_object (G_OBJECT (toplevel));
+
+          for (list = accel_groups; list; list = list->next)
+            {
+              GtkAccelGroup *accel_group = list->data;
+
+              if (gtk_accel_group_query (accel_group, accel_key, accel_mods,
+                                         NULL))
+                {
+                  gtk_menu_shell_cancel (GTK_MENU_SHELL (widget));
+                  gtk_window_activate_key (GTK_WINDOW (toplevel), event);
+
+                  break;
+                }
+            }
+        }
+    }
+
   return TRUE;
 }
 
@@ -3271,14 +3523,36 @@
   menu_item = gtk_get_event_widget ((GdkEvent*) event);
   if (!GTK_IS_MENU_ITEM (menu_item) ||
       !GTK_IS_MENU (menu_item->parent))
-    return FALSE;
+    {
+      GtkMenuPrivate *priv = gtk_menu_get_private (GTK_MENU (widget));
+
+      if (priv->context_menu)
+        {
+          gint threshold;
+
+          g_object_get (gtk_widget_get_settings (widget),
+                        "gtk-dnd-drag-threshold", &threshold,
+                        NULL);
+
+          /* Context menu mode. If we dragged out of the menu, close
+           * the menu, as by the specs.
+           */
+          if (!pointer_in_menu_window (widget, event->x_root, event->y_root) &&
+              (distance_traveled (widget) >= threshold) &&
+              (event->state & GDK_BUTTON1_MASK))
+            {
+              gtk_menu_shell_deactivate (GTK_MENU_SHELL (widget));
+
+              return TRUE;
+            }
+        }
+
+      return FALSE;
+    }
 
   menu_shell = GTK_MENU_SHELL (menu_item->parent);
   menu = GTK_MENU (menu_shell);
 
-  if (definitely_within_item (menu_item, event->x, event->y))
-    menu_shell->activate_time = 0;
-
   need_enter = (gtk_menu_has_navigation_triangle (menu) || menu_shell->ignore_enter);
 
   /* Check to see if we are within an active submenu's navigation region
@@ -3346,13 +3620,15 @@
   GtkMenuPrivate   *priv = gtk_menu_get_private (menu);
   gboolean          double_arrows;
   GtkArrowPlacement arrow_placement;
+  gboolean opposite_arrows;
 
   gtk_widget_style_get (GTK_WIDGET (menu),
                         "double-arrows", &double_arrows,
                         "arrow-placement", &arrow_placement,
+                        "opposite-arrows", &opposite_arrows,
                         NULL);
 
-  if (arrow_placement != GTK_ARROWS_BOTH)
+  if (arrow_placement != GTK_ARROWS_BOTH || !opposite_arrows)
     return TRUE;
 
   return double_arrows || (priv->initially_pushed_in &&
@@ -3414,17 +3690,101 @@
     gtk_menu_scroll_to (menu, offset);
 }
 
+#include "gtkseparatormenuitem.h"
+
+/* Same as _gtk_menu_item_is_selectable() except that this considers
+ * insensitive items valid - otherwise scrolling would skip them over, or stop
+ * scrolling before the begin/end of the menu, both of which would look bad */
+static gboolean
+_gtk_menu_item_is_scrollable (GtkWidget *menu_item)
+{
+  if ((!GTK_BIN (menu_item)->child &&
+       G_OBJECT_TYPE (menu_item) == GTK_TYPE_MENU_ITEM) ||
+      GTK_IS_SEPARATOR_MENU_ITEM (menu_item) ||
+      !gtk_widget_get_visible (menu_item))
+    return FALSE;
+
+  return TRUE;
+}
+
 static void
 gtk_menu_do_timeout_scroll (GtkMenu  *menu,
                             gboolean  touchscreen_mode)
 {
   gboolean upper_visible;
   gboolean lower_visible;
+  GtkWidget *item = NULL;
 
   upper_visible = menu->upper_arrow_visible;
   lower_visible = menu->lower_arrow_visible;
 
-  gtk_menu_scroll_by (menu, menu->scroll_step);
+#define VISIBILITY_THRESHOLD 0.70
+  if (touchscreen_mode)
+    {
+      GdkRectangle visible;
+      GdkRectangle rect;
+      GList *l;
+
+      /* Scroll by item picking the next item that is not sufficiently
+       * readable. The visibility threshold is to avoid the impression of
+       * skipping an item when there's only one or two pixels obscured.
+       */
+
+      visible.x = 0; /* unused */
+      visible.y = menu->scroll_offset;
+      gdk_drawable_get_size (menu->view_window, &visible.width, &visible.height);
+
+      if (menu->scroll_step < 0)
+        {
+          /* scrolling up */
+          for (l = GTK_MENU_SHELL (menu)->children; l != NULL; l = l->next)
+            {
+              GtkWidget *child = l->data;
+
+              if (!_gtk_menu_item_is_scrollable (child))
+                continue;
+
+              /* completely below the top edge, use the previous one */
+              if (child->allocation.y >= visible.y)
+                break;
+
+              /* visible/readable enough, use the previous one */
+              if (gdk_rectangle_intersect (&child->allocation, &visible, &rect) &&
+                  rect.height / (float)child->allocation.height >= VISIBILITY_THRESHOLD)
+                break;
+
+              item = child;
+            }
+        }
+      else
+        {
+          /* scrolling down */
+          for (l = GTK_MENU_SHELL (menu)->children; l != NULL; l = l->next)
+            {
+              GtkWidget *child = l->data;
+
+              if (!_gtk_menu_item_is_scrollable (child))
+                continue;
+
+              /* skip all completely above the bottom edge */
+              if (child->allocation.y + child->allocation.height < visible.y + visible.height)
+                continue;
+
+              /* visible/readable enough, try the next one */
+              if (gdk_rectangle_intersect (&child->allocation, &visible, &rect) &&
+                  rect.height / (float)child->allocation.height >= VISIBILITY_THRESHOLD)
+                continue;
+
+              item = child;
+              break;
+            }
+        }
+    }
+
+  if (item)
+    gtk_menu_scroll_item_visible (GTK_MENU_SHELL (menu), item);
+  else
+    gtk_menu_scroll_by (menu, menu->scroll_step);
 
   if (touchscreen_mode &&
       (upper_visible != menu->upper_arrow_visible ||
@@ -3470,6 +3830,9 @@
                 "gtk-touchscreen-mode", &touchscreen_mode,
                 NULL);
 
+  if (touchscreen_mode)
+    timeout *= SCROLL_DELAY_FACTOR;
+
   gtk_menu_do_timeout_scroll (menu, touchscreen_mode);
 
   gtk_menu_remove_scroll_timeout (menu);
@@ -3488,7 +3851,7 @@
   gboolean touchscreen_mode;
 
   g_object_get (gtk_widget_get_settings (GTK_WIDGET (menu)),
-                "gtk-timeout-repeat", &timeout,
+                "gtk-timeout-initial", &timeout,
                 "gtk-touchscreen-mode", &touchscreen_mode,
                 NULL);
 
@@ -3531,6 +3894,7 @@
   gint win_x, win_y;
   gint scroll_arrow_height;
   GtkArrowPlacement arrow_placement;
+  gboolean opposite_arrows;
 
   width = gdk_window_get_width (GTK_WIDGET (menu)->window);
   height = gdk_window_get_height (GTK_WIDGET (menu)->window);
@@ -3539,6 +3903,7 @@
                         "vertical-padding", &vertical_padding,
                         "scroll-arrow-vlength", &scroll_arrow_height,
                         "arrow-placement", &arrow_placement,
+                        "opposite-arrows", &opposite_arrows,
                         NULL);
 
   border = GTK_CONTAINER (menu)->border_width +
@@ -3546,6 +3911,9 @@
 
   gdk_window_get_position (GTK_WIDGET (menu)->window, &win_x, &win_y);
 
+  if (opposite_arrows)
+    arrow_placement = GTK_ARROWS_BOTH;
+
   switch (arrow_placement)
     {
     case GTK_ARROWS_BOTH:
@@ -5368,5 +5736,20 @@
   return !priv->no_toggle_size;
 }
 
+/* Hildon functions to make context menus behave according to spec */
+void
+_gtk_menu_push_context_menu_behavior (void)
+{
+  context_menu_counter++;
+}
+
+void
+_gtk_menu_pop_context_menu_behavior (void)
+{
+  g_return_if_fail (context_menu_counter > 0);
+
+  context_menu_counter--;
+}
+
 #define __GTK_MENU_C__
 #include "gtkaliasdef.c"
--- a/gtk/gtkmenu.h
+++ b/gtk/gtkmenu.h
@@ -213,6 +213,8 @@
                                           gboolean   reserve_toggle_size);
 gboolean gtk_menu_get_reserve_toggle_size (GtkMenu  *menu);
 
+void     _gtk_menu_push_context_menu_behavior (void);
+void     _gtk_menu_pop_context_menu_behavior (void);
 
 G_END_DECLS
 
