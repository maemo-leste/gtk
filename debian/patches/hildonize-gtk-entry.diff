--- a/gtk/gtkentry.c
+++ b/gtk/gtkentry.c
@@ -139,6 +139,9 @@
   gint start_y;
 
   gchar *im_module;
+
+  gchar *placeholder_text;
+  PangoLayout *placeholder_layout;
 };
 
 typedef struct _GtkEntryPasswordHint GtkEntryPasswordHint;
@@ -172,6 +175,8 @@
   ICON_PRESS,
   ICON_RELEASE,
   PREEDIT_CHANGED,
+  INVALID_INPUT,
+  SELECT_ALL,
   LAST_SIGNAL
 };
 
@@ -218,7 +223,10 @@
   PROP_TOOLTIP_MARKUP_PRIMARY,
   PROP_TOOLTIP_MARKUP_SECONDARY,
   PROP_IM_MODULE,
-  PROP_EDITING_CANCELED
+  PROP_EDITING_CANCELED,
+  PROP_HILDON_PLACEHOLDER_TEXT,
+  PROP_HILDON_INPUT_MODE,
+  PROP_HILDON_INPUT_DEFAULT
 };
 
 static guint signals[LAST_SIGNAL] = { 0 };
@@ -406,6 +414,13 @@
 						   gint          offset,
 						   gint          n_chars,
 						   GtkEntry     *entry);
+static gboolean gtk_entry_has_selection_cb        (GtkIMContext *context,
+						   GtkEntry     *entry);
+static void     gtk_entry_clipboard_operation_cb  (GtkIMContext *context,
+						   GtkIMContextClipboardOperation op,
+						   GtkEntry     *entry);
+
+static PangoLayout * gtk_entry_create_placeholder_layout (GtkEntry *entry);
 
 /* Internal routines
  */
@@ -770,7 +785,7 @@
                                    g_param_spec_boolean ("truncate-multiline",
                                                          P_("Truncate multiline"),
                                                          P_("Whether to truncate multiline pastes to one line."),
-                                                         FALSE,
+							 TRUE,
                                                          GTK_PARAM_READWRITE));
 
   /**
@@ -1222,6 +1237,59 @@
                                                         GTK_PARAM_READWRITE));
 
   /**
+   * GtkEntry:hildon-placeholder-text:
+   *
+   * Text to be displayed in the #GtkEntry when it is empty.
+   *
+   * Since: maemo 5
+   */
+   g_object_class_install_property (gobject_class,
+				    PROP_HILDON_PLACEHOLDER_TEXT,
+				    g_param_spec_string ("hildon-placeholder-text",
+							 P_("Hildon Placeholder text"),
+							 P_("Text to be displayed when the entry is empty"),
+							 "",
+							 G_PARAM_READWRITE));
+
+   /**
+    * GtkEntry:hildon-input-mode:
+    *
+    * Allowed characters and input mode for the entry. See #HildonGtkInputMode.
+    *
+    * Since: maemo 2.0
+    * Stability: Unstable
+    */
+    g_object_class_install_property (gobject_class,
+				     PROP_HILDON_INPUT_MODE,
+				     g_param_spec_flags ("hildon-input-mode",
+							 P_("Hildon input mode"),
+							 P_("Define widget's input mode"),
+							 HILDON_TYPE_GTK_INPUT_MODE,
+							 HILDON_GTK_INPUT_MODE_FULL |
+							 HILDON_GTK_INPUT_MODE_AUTOCAP |
+							 HILDON_GTK_INPUT_MODE_DICTIONARY,
+							 GTK_PARAM_READWRITE | G_PARAM_CONSTRUCT));
+
+   /**
+    * GtkEntry:hildon-input-default:
+    *
+    * Default input mode for this IM context.  See #HildonGtkInputMode.
+    * The default setting for this property is %HILDON_GTK_INPUT_MODE_FULL,
+    * which means that the default input mode to be used is up to the
+    * implementation of the IM context.
+    *
+    * Since: maemo 5
+    */
+    g_object_class_install_property (gobject_class,
+				     PROP_HILDON_INPUT_DEFAULT,
+				     g_param_spec_flags ("hildon-input-default",
+							 P_("Hildon input default"),
+							 P_("Define widget's default input mode"),
+							 HILDON_TYPE_GTK_INPUT_MODE,
+							 HILDON_GTK_INPUT_MODE_FULL,
+							 GTK_PARAM_READWRITE | G_PARAM_CONSTRUCT));
+
+  /**
    * GtkEntry:icon-prelight:
    *
    * The prelight style property determines whether activatable
@@ -1572,6 +1640,46 @@
                                 G_TYPE_NONE, 1,
                                 G_TYPE_STRING);
 
+  /**
+   * GtkEntry::invalid-input:
+   *
+   * Emitted when the users enters a character that does not belong to the
+   * #HildonGtkInputMode of the entry, or the maximum number of characters
+   * has been reached.
+   *
+   * Since: maemo 1.0
+   * Stability: Unstable
+   */
+  signals[INVALID_INPUT] =
+    g_signal_new ("invalid_input",
+		  G_OBJECT_CLASS_TYPE (gobject_class),
+		  G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION,
+		  G_STRUCT_OFFSET (GtkEntryClass, invalid_input),
+		  NULL, NULL,
+		  _gtk_marshal_VOID__ENUM,
+		  G_TYPE_NONE, 1,
+		  GTK_TYPE_INVALID_INPUT_TYPE);
+
+  /**
+   * GtkEntry::select-all:
+   * @entry: the object which received the signal
+   *
+   * The ::select-all signal is a
+   * <link linkend="keybinding-signals">keybinding signal</link>
+   * which gets emitted to select the complete contents of the entry.
+   *
+   * The default bindings for this signal are Ctrl-a and Ctrl-/.
+   *
+   * Since: 2.20
+   */
+  signals[SELECT_ALL] =
+    g_signal_new_class_handler (I_("select-all"),
+				G_OBJECT_CLASS_TYPE (gobject_class),
+				G_SIGNAL_RUN_LAST | G_SIGNAL_ACTION,
+				G_CALLBACK (gtk_entry_select_all),
+				NULL, NULL,
+				g_cclosure_marshal_VOID__VOID,
+				G_TYPE_NONE, 0, G_TYPE_NONE);
 
   /*
    * Key bindings
@@ -1631,26 +1739,9 @@
   /* Select all
    */
   gtk_binding_entry_add_signal (binding_set, GDK_a, GDK_CONTROL_MASK,
-                                "move-cursor", 3,
-                                GTK_TYPE_MOVEMENT_STEP, GTK_MOVEMENT_BUFFER_ENDS,
-                                G_TYPE_INT, -1,
-				G_TYPE_BOOLEAN, FALSE);
-  gtk_binding_entry_add_signal (binding_set, GDK_a, GDK_CONTROL_MASK,
-                                "move-cursor", 3,
-                                GTK_TYPE_MOVEMENT_STEP, GTK_MOVEMENT_BUFFER_ENDS,
-                                G_TYPE_INT, 1,
-				G_TYPE_BOOLEAN, TRUE);  
-
-  gtk_binding_entry_add_signal (binding_set, GDK_slash, GDK_CONTROL_MASK,
-                                "move-cursor", 3,
-                                GTK_TYPE_MOVEMENT_STEP, GTK_MOVEMENT_BUFFER_ENDS,
-                                G_TYPE_INT, -1,
-				G_TYPE_BOOLEAN, FALSE);
+				"select-all", 0);
   gtk_binding_entry_add_signal (binding_set, GDK_slash, GDK_CONTROL_MASK,
-                                "move-cursor", 3,
-                                GTK_TYPE_MOVEMENT_STEP, GTK_MOVEMENT_BUFFER_ENDS,
-                                G_TYPE_INT, 1,
-				G_TYPE_BOOLEAN, TRUE);  
+				"select-all", 0);
   /* Unselect all 
    */
   gtk_binding_entry_add_signal (binding_set, GDK_backslash, GDK_CONTROL_MASK,
@@ -1830,7 +1921,20 @@
       break;
       
     case PROP_VISIBILITY:
-      gtk_entry_set_visibility (entry, g_value_get_boolean (value));
+      {
+	/* converting to hildon input mode first then through
+       * that mode changing function to reach compatible with
+       * the gtk original visibility changing
+       */
+	HildonGtkInputMode mode = hildon_gtk_entry_get_input_mode (entry);
+
+	if (g_value_get_boolean (value))
+	  mode &= ~HILDON_GTK_INPUT_MODE_INVISIBLE;
+	else
+	  mode |= HILDON_GTK_INPUT_MODE_INVISIBLE;
+
+	hildon_gtk_entry_set_input_mode (entry, mode);
+      }
       break;
 
     case PROP_HAS_FRAME:
@@ -1999,6 +2103,18 @@
       entry->editing_canceled = g_value_get_boolean (value);
       break;
 
+    case PROP_HILDON_PLACEHOLDER_TEXT:
+      hildon_gtk_entry_set_placeholder_text (entry, g_value_get_string (value));
+      break;
+
+    case PROP_HILDON_INPUT_MODE:
+      hildon_gtk_entry_set_input_mode (entry, g_value_get_flags (value));
+      break;
+
+    case PROP_HILDON_INPUT_DEFAULT:
+      hildon_gtk_entry_set_input_default (entry, g_value_get_flags (value));
+      break;
+
     case PROP_SCROLL_OFFSET:
     case PROP_CURSOR_POSITION:
     default:
@@ -2215,6 +2331,18 @@
                            entry->editing_canceled);
       break;
 
+    case PROP_HILDON_PLACEHOLDER_TEXT:
+      g_value_set_string (value, hildon_gtk_entry_get_placeholder_text (entry));
+      break;
+
+    case PROP_HILDON_INPUT_MODE:
+      g_value_set_flags (value, hildon_gtk_entry_get_input_mode (entry));
+      break;
+
+    case PROP_HILDON_INPUT_DEFAULT:
+      g_value_set_flags (value, hildon_gtk_entry_get_input_default (entry));
+      break;
+
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -2285,13 +2413,15 @@
   entry->is_cell_renderer = FALSE;
   entry->editing_canceled = FALSE;
   entry->has_frame = TRUE;
-  entry->truncate_multiline = FALSE;
+  entry->truncate_multiline = TRUE;
   priv->shadow_type = GTK_SHADOW_IN;
   priv->xalign = 0.0;
   priv->caps_lock_warning = TRUE;
   priv->caps_lock_warning_shown = FALSE;
   priv->progress_fraction = 0.0;
   priv->progress_pulse_fraction = 0.1;
+  priv->placeholder_text = NULL;
+  priv->placeholder_layout = NULL;
 
   gtk_drag_dest_set (GTK_WIDGET (entry),
                      GTK_DEST_DEFAULT_HIGHLIGHT,
@@ -2312,7 +2442,10 @@
 		    G_CALLBACK (gtk_entry_retrieve_surrounding_cb), entry);
   g_signal_connect (entry->im_context, "delete-surrounding",
 		    G_CALLBACK (gtk_entry_delete_surrounding_cb), entry);
-
+  g_signal_connect (entry->im_context, "has_selection",
+		    G_CALLBACK (gtk_entry_has_selection_cb), entry);
+  g_signal_connect (entry->im_context, "clipboard_operation",
+		    G_CALLBACK (gtk_entry_clipboard_operation_cb), entry);
 }
 
 static gint
@@ -2498,6 +2631,18 @@
 
   g_free (priv->im_module);
 
+  if (priv->placeholder_text)
+    {
+      g_free (priv->placeholder_text);
+      priv->placeholder_text = NULL;
+    }
+
+  if (priv->placeholder_layout)
+    {
+      g_object_unref (priv->placeholder_layout);
+      priv->placeholder_layout = NULL;
+    }
+
   G_OBJECT_CLASS (gtk_entry_parent_class)->finalize (object);
 }
 
@@ -3656,6 +3801,16 @@
 
   gtk_entry_reset_blink_time (entry);
 
+  if (entry->editable)
+    {
+      if (hildon_gtk_im_context_filter_event (entry->im_context,
+					      (GdkEvent *) event))
+	{
+	  entry->need_im_reset = TRUE;
+	  return TRUE;
+	}
+    }
+
   entry->button = event->button;
   
   if (!gtk_widget_has_focus (widget))
@@ -3665,6 +3820,9 @@
       entry->in_click = FALSE;
     }
   
+  /* we need to reset IM context so pre-edit string can be committed */
+  _gtk_entry_reset_im_context (entry);
+
   tmp_pos = gtk_entry_find_position (entry, event->x + entry->scroll_offset);
 
   if (_gtk_button_event_triggers_context_menu (event))
@@ -3683,8 +3841,6 @@
 
       if (event->state & GTK_EXTEND_SELECTION_MOD_MASK)
 	{
-	  _gtk_entry_reset_im_context (entry);
-	  
 	  if (!have_selection) /* select from the current position to the clicked position */
 	    sel_start = sel_end = entry->current_pos;
 	  
@@ -3842,6 +3998,16 @@
   if (event->window != entry->text_area || entry->button != event->button)
     return FALSE;
 
+  if (entry->editable)
+    {
+      if (hildon_gtk_im_context_filter_event (entry->im_context,
+					      (GdkEvent *) event))
+	{
+	  entry->need_im_reset = TRUE;
+	  return TRUE;
+	}
+    }
+
   if (entry->in_drag)
     {
       gint tmp_pos = gtk_entry_find_position (entry, entry->drag_start_x);
@@ -4349,6 +4515,14 @@
 {
   GtkEntry *entry = GTK_ENTRY (editable);
   guint length;
+  GtkWidget *widget = GTK_WIDGET (editable);
+  gboolean flip = FALSE;
+
+  if (start == 0 && end == -1 && gtk_widget_has_screen (widget))
+    {
+      GtkSettings *settings = gtk_widget_get_settings (widget);
+      g_object_get (settings, "gtk-touchscreen-mode", &flip, NULL);
+    }
 
   length = gtk_entry_buffer_get_length (get_buffer (entry));
   if (start < 0)
@@ -4356,11 +4530,14 @@
   if (end < 0)
     end = length;
   
-  _gtk_entry_reset_im_context (entry);
-
-  gtk_entry_set_positions (entry,
-			   MIN (end, length),
-			   MIN (start, length));
+  if (flip)
+    gtk_entry_set_positions (entry,
+			     MIN (start, entry->text_length),
+			     MIN (end, entry->text_length));
+  else
+    gtk_entry_set_positions (entry,
+			     MIN (end, entry->text_length),
+			     MIN (start, entry->text_length));
 
   gtk_entry_update_primary_selection (entry);
 }
@@ -4435,6 +4612,12 @@
 
   gtk_entry_recompute (entry);
 
+  if (priv->placeholder_text)
+    {
+      g_object_unref (priv->placeholder_layout);
+      priv->placeholder_layout = gtk_entry_create_placeholder_layout (entry);
+    }
+
   if (previous_style && gtk_widget_get_realized (widget))
     {
       gdk_window_set_background (widget->window, &widget->style->base[gtk_widget_get_state (widget)]);
@@ -4507,7 +4690,6 @@
   g_slice_free (GtkEntryPasswordHint, password_hint);
 }
 
-
 static gboolean
 gtk_entry_remove_password_hint (gpointer data)
 {
@@ -4519,6 +4701,113 @@
   return FALSE;
 }
 
+/* Returns TRUE if chr is valid in given input mode. Probably should
+ * be made public, but there's no good place for it and the input mode
+ * design might change, so for now we'll keep this here.
+ */
+static gboolean
+hildon_gtk_input_mode_is_valid_char (HildonGtkInputMode  mode,
+				     gunichar            chr,
+				     gunichar           *chr_)
+{
+  static const char *tele_chars_ascii = "p#*+";
+
+  if (g_unichar_isalpha (chr) || chr == ' ')
+    {
+      if ((mode & HILDON_GTK_INPUT_MODE_ALPHA) != 0)
+	return TRUE;
+      if ((mode & HILDON_GTK_INPUT_MODE_HEXA) != 0 && g_unichar_isxdigit(chr))
+	return TRUE;
+    }
+  else if (g_unichar_isdigit (chr))
+    {
+      if ((mode & (HILDON_GTK_INPUT_MODE_NUMERIC |
+		   HILDON_GTK_INPUT_MODE_HEXA |
+		   HILDON_GTK_INPUT_MODE_TELE)) != 0)
+	{
+	  gchar* number = g_strdup_printf ("%d", g_unichar_digit_value (chr));
+	  *chr_ = g_utf8_get_char (number);
+	  g_free (number);
+	  return chr == *chr_;
+	}
+    }
+  else
+    {
+      /* special = anything else than alphanumeric/space */
+      if ((mode & HILDON_GTK_INPUT_MODE_SPECIAL) != 0)
+	return TRUE;
+
+      /* numeric also contains '-', but hexa doesn't */
+      if ((mode & HILDON_GTK_INPUT_MODE_NUMERIC) != 0 && chr == '-')
+	return TRUE;
+    }
+
+  /* check special tele chars last */
+  if ((mode & HILDON_GTK_INPUT_MODE_TELE) != 0 &&
+      strchr(tele_chars_ascii, chr) != NULL)
+    return TRUE;
+
+  return FALSE;
+}
+
+static gboolean
+gtk_entry_filter_text (GtkEntry    *entry,
+		       const gchar *str,
+		       gint         length,
+		       gint         nbytes,
+		       gchar      **filtered)
+{
+  HildonGtkInputMode input_mode;
+
+  g_assert (GTK_IS_ENTRY (entry));
+
+  if (!length || !str)
+    return FALSE;
+
+  if (!g_utf8_validate (str, nbytes, NULL))
+    return FALSE;
+
+  input_mode = hildon_gtk_entry_get_input_mode (entry);
+
+  if ((input_mode & HILDON_GTK_INPUT_MODE_TELE) != 0)
+    {
+      gboolean valid = TRUE;
+      GString *result = g_string_sized_new (nbytes);
+
+      while(length)
+	{
+	  gunichar chr = g_utf8_get_char (str);
+	  gunichar chr_ = chr;
+	  gboolean valid_char;
+
+	  valid_char = hildon_gtk_input_mode_is_valid_char (input_mode, chr, &chr_);
+	  if (valid_char || chr != chr_)
+	    g_string_append_unichar (result, chr_);
+	  if (!valid_char)
+	    valid = FALSE;
+
+	  str = g_utf8_next_char (str);
+	  length--;
+	}
+
+      *filtered = g_string_free (result, FALSE);
+      return valid;
+    }
+
+  while(length)
+    {
+      gunichar chr = g_utf8_get_char (str);
+
+      if (!hildon_gtk_input_mode_is_valid_char (input_mode, chr, &chr))
+	return FALSE;
+
+      str = g_utf8_next_char (str);
+      length--;
+    }
+
+  return TRUE;
+}
+
 /* Default signal handlers
  */
 static void
@@ -4529,9 +4818,28 @@
 {
   guint n_inserted;
   gint n_chars;
+  gchar *filtered = NULL;
+  GtkEntry *entry = GTK_ENTRY (editable);
 
   n_chars = g_utf8_strlen (new_text, new_text_length);
 
+  if (!gtk_entry_filter_text (entry, new_text, n_chars,
+			      new_text_length, &filtered))
+    {
+      if (filtered)
+	{
+	  new_text = filtered;
+	  new_text_length = strlen (filtered);
+	  n_chars = g_utf8_strlen (filtered, new_text_length);
+	}
+      else
+	{
+	  g_signal_emit (entry, signals[INVALID_INPUT], 0,
+			 GTK_INVALID_INPUT_MODE_RESTRICTION);
+	  return;
+	}
+    }
+
   /*
    * The actual insertion into the buffer. This will end up firing the
    * following signal handlers: buffer_inserted_text(), buffer_notify_display_text(),
@@ -4540,9 +4848,13 @@
   n_inserted = gtk_entry_buffer_insert_text (get_buffer (GTK_ENTRY (editable)), *position, new_text, n_chars);
 
   if (n_inserted != n_chars)
-      gtk_widget_error_bell (GTK_WIDGET (editable));
+    {
+      g_signal_emit (entry, signals[INVALID_INPUT], 0,
+		     GTK_INVALID_INPUT_MAX_CHARS_REACHED);
+    }
 
   *position += n_inserted;
+  g_free (filtered);
 }
 
 static void
@@ -4871,8 +5183,6 @@
   gint end_pos = entry->current_pos;
   gint old_n_bytes = gtk_entry_buffer_get_bytes (get_buffer (entry));
   
-  _gtk_entry_reset_im_context (entry);
-
   if (!entry->editable)
     {
       gtk_widget_error_bell (GTK_WIDGET (entry));
@@ -4947,8 +5257,6 @@
   GtkEditable *editable = GTK_EDITABLE (entry);
   gint prev_pos;
 
-  _gtk_entry_reset_im_context (entry);
-
   if (!entry->editable)
     {
       gtk_widget_error_bell (GTK_WIDGET (entry));
@@ -5193,6 +5501,36 @@
   return TRUE;
 }
 
+static gboolean
+gtk_entry_has_selection_cb (GtkIMContext *context,
+			    GtkEntry     *entry)
+{
+  return gtk_editable_get_selection_bounds (GTK_EDITABLE (entry), NULL, NULL);
+}
+
+static void
+gtk_entry_clipboard_operation_cb (GtkIMContext                   *context,
+				  GtkIMContextClipboardOperation  op,
+				  GtkEntry                       *entry)
+{
+  /* Similar to gtk_editable_*_clipboard(), handle these by sending
+   * signals instead of directly calling our internal functions. That
+   * way the application can hook into them if needed.
+   */
+  switch (op)
+    {
+    case GTK_IM_CONTEXT_CLIPBOARD_OP_COPY:
+      g_signal_emit_by_name (entry, "copy_clipboard");
+      break;
+    case GTK_IM_CONTEXT_CLIPBOARD_OP_CUT:
+      g_signal_emit_by_name (entry, "cut_clipboard");
+      break;
+    case GTK_IM_CONTEXT_CLIPBOARD_OP_PASTE:
+      g_signal_emit_by_name (entry, "paste_clipboard");
+      break;
+    }
+}
+
 /* Internal functions
  */
 
@@ -5334,6 +5672,58 @@
 }
 
 static PangoLayout *
+gtk_entry_create_placeholder_layout (GtkEntry *entry)
+{
+  GtkWidget *widget = GTK_WIDGET (entry);
+  PangoLayout *layout = gtk_widget_create_pango_layout (widget, NULL);
+  GtkEntryPrivate *priv = GTK_ENTRY_GET_PRIVATE (entry);
+  PangoDirection pango_dir;
+  GdkColor font_color;
+
+  pango_layout_set_single_paragraph_mode (layout, TRUE);
+
+  pango_dir = pango_find_base_dir (priv->placeholder_text,
+				   strlen (priv->placeholder_text));
+
+  if (pango_dir == PANGO_DIRECTION_NEUTRAL)
+    {
+      if (gtk_widget_get_direction (widget) == GTK_TEXT_DIR_RTL)
+	pango_dir = PANGO_DIRECTION_RTL;
+      else
+	pango_dir = PANGO_DIRECTION_LTR;
+    }
+
+  pango_context_set_base_dir (gtk_widget_get_pango_context (widget),
+			      pango_dir);
+
+  pango_layout_set_alignment (layout, pango_dir);
+
+  pango_layout_set_text (layout, priv->placeholder_text,
+			 strlen (priv->placeholder_text));
+
+  if (gtk_style_lookup_color (widget->style, "ReversedSecondaryTextColor",
+			      &font_color))
+    {
+      PangoAttrList *list;
+      PangoAttribute *attr;
+
+      list = pango_attr_list_new ();
+      attr = pango_attr_foreground_new (font_color.red,
+					font_color.green,
+					font_color.blue);
+      attr->start_index = 0;
+      attr->end_index = G_MAXINT;
+      pango_attr_list_insert (list, attr);
+
+      pango_layout_set_attributes (layout, list);
+
+      pango_attr_list_unref (list);
+    }
+
+  return layout;
+}
+
+static PangoLayout *
 gtk_entry_create_layout (GtkEntry *entry,
 			 gboolean  include_preedit)
 {
@@ -5441,6 +5831,19 @@
   return entry->cached_layout;
 }
 
+static inline gboolean
+show_placeholder (GtkEntry *entry)
+{
+  GtkEntryPrivate *priv = GTK_ENTRY_GET_PRIVATE (entry);
+
+  if (!gtk_widget_has_focus (GTK_WIDGET (entry))
+      && gtk_entry_buffer_get_bytes (get_buffer (entry)) == 0
+      && priv->placeholder_text)
+    return TRUE;
+
+  return FALSE;
+}
+
 static void
 get_layout_position (GtkEntry *entry,
                      gint     *x,
@@ -5452,8 +5855,12 @@
   GtkBorder inner_border;
   gint y_pos;
   PangoLayoutLine *line;
+  GtkEntryPrivate *priv = GTK_ENTRY_GET_PRIVATE (entry);
   
-  layout = gtk_entry_ensure_layout (entry, TRUE);
+  if (show_placeholder (entry))
+      layout = priv->placeholder_layout;
+  else
+    layout = gtk_entry_ensure_layout (entry, TRUE);
 
   gtk_entry_get_text_area_size (entry, NULL, NULL, &area_width, &area_height);
   _gtk_entry_effective_inner_border (entry, &inner_border);
@@ -5487,13 +5894,19 @@
 static void
 draw_text_with_color (GtkEntry *entry, cairo_t *cr, GdkColor *default_color)
 {
-  PangoLayout *layout = gtk_entry_ensure_layout (entry, TRUE);
+  GtkEntryPrivate *priv = GTK_ENTRY_GET_PRIVATE (entry);
+  PangoLayout *layout;
   GtkWidget *widget;
   gint x, y;
   gint start_pos, end_pos;
 
   widget = GTK_WIDGET (entry);
 
+  if (show_placeholder (entry))
+    layout = priv->placeholder_layout;
+  else
+    layout = gtk_entry_ensure_layout (entry, TRUE);
+
   cairo_save (cr);
 
   get_layout_position (entry, &x, &y);
@@ -5772,11 +6185,7 @@
 void
 _gtk_entry_reset_im_context (GtkEntry *entry)
 {
-  if (entry->need_im_reset)
-    {
-      entry->need_im_reset = FALSE;
-      gtk_im_context_reset (entry->im_context);
-    }
+  gtk_im_context_reset (entry->im_context);
 }
 
 /**
@@ -6898,15 +7307,19 @@
 {
   g_return_if_fail (GTK_IS_ENTRY (entry));
 
-  visible = visible != FALSE;
+  g_object_set (G_OBJECT (entry), "visibility", visible, NULL);
+}
 
-  if (entry->visible != visible)
-    {
-      entry->visible = visible;
+static void
+gtk_entry_set_real_visibility (GtkEntry *entry,
+			       gboolean visible)
+{
+  g_return_if_fail (GTK_IS_ENTRY (entry));
 
-      g_object_notify (G_OBJECT (entry), "visibility");
-      gtk_entry_recompute (entry);
-    }
+   entry->visible = visible ? TRUE : FALSE;
+   g_object_notify (G_OBJECT (entry), "visibility");
+
+   gtk_entry_recompute (entry);
 }
 
 /**
@@ -10129,5 +10542,150 @@
     remove_capslock_feedback (entry);
 }
 
+/**
+ * hildon_gtk_entry_set_placeholder_text:
+ * @entry: a #GtkEntry
+ * @placeholder_text: a string to be displayed when @entry is empty
+ * and unfocused or %NULL to remove current placeholder text.
+ *
+ * Sets a text string to be displayed when @entry is empty and unfocused.
+ * This can be provided to give a visual hint of the expected contents
+ * of the #GtkEntry.
+ *
+ * Since: maemo 5
+ **/
+void
+hildon_gtk_entry_set_placeholder_text (GtkEntry    *entry,
+				       const gchar *placeholder_text)
+{
+  GtkEntryPrivate *priv;
+
+  g_return_if_fail (GTK_IS_ENTRY (entry));
+
+  priv = GTK_ENTRY_GET_PRIVATE (entry);
+
+  if (priv->placeholder_text)
+    {
+      g_free (priv->placeholder_text);
+      g_object_unref (priv->placeholder_layout);
+    }
+
+  if (placeholder_text)
+    {
+      priv->placeholder_text = g_strdup (placeholder_text);
+      priv->placeholder_layout = gtk_entry_create_placeholder_layout (entry);
+    }
+  else
+    {
+      priv->placeholder_text = NULL;
+      priv->placeholder_layout = NULL;
+    }
+
+  if (show_placeholder (entry))
+    {
+      gtk_widget_queue_draw (GTK_WIDGET (entry));
+    }
+
+  g_object_notify (G_OBJECT (entry), "hildon-placeholder-text");
+}
+
+/**
+ * hildon_gtk_entry_get_placeholder_text:
+ * @entry: a #GtkEntry
+ *
+ * Gets the text to be displayed if @entry is empty and unfocused.
+ *
+ * Returns: a string or %NULL if no placeholder text is set
+ *
+ * Since: maemo 5
+ **/
+const gchar *
+hildon_gtk_entry_get_placeholder_text (GtkEntry *entry)
+{
+  GtkEntryPrivate *priv;
+
+  g_return_val_if_fail (GTK_IS_ENTRY (entry), NULL);
+
+  priv = GTK_ENTRY_GET_PRIVATE (entry);
+
+  return priv->placeholder_text;
+}
+
+void
+hildon_gtk_entry_set_input_mode (GtkEntry           *entry,
+				 HildonGtkInputMode  mode)
+{
+  g_return_if_fail (GTK_IS_ENTRY (entry));
+
+  if (hildon_gtk_entry_get_input_mode (entry) != mode)
+    {
+      gtk_entry_set_real_visibility (entry,
+				     mode & HILDON_GTK_INPUT_MODE_INVISIBLE
+				     ? FALSE : TRUE);
+      g_object_set (G_OBJECT (entry->im_context),
+		    "hildon-input-mode", mode, NULL);
+      g_object_notify (G_OBJECT (entry), "hildon-input-mode");
+  }
+}
+
+HildonGtkInputMode
+hildon_gtk_entry_get_input_mode (GtkEntry *entry)
+{
+  HildonGtkInputMode mode;
+
+  g_return_val_if_fail (GTK_IS_ENTRY (entry), FALSE);
+
+  g_object_get (G_OBJECT (entry->im_context),
+		"hildon-input-mode", &mode, NULL);
+
+  return mode;
+}
+
+/**
+ * hildon_gtk_entry_set_input_default:
+ * @entry: a #GtkEntry
+ * @mode: a #HildonGtkInputMode
+ *
+ * Sets the default input mode of the widget.
+ *
+ * Since: maemo 5.0
+ */
+void
+hildon_gtk_entry_set_input_default (GtkEntry           *entry,
+				    HildonGtkInputMode  mode)
+{
+  g_return_if_fail (GTK_IS_ENTRY (entry));
+
+  if (hildon_gtk_entry_get_input_default (entry) != mode)
+    {
+      g_object_set (G_OBJECT (entry->im_context),
+		    "hildon-input-default", mode, NULL);
+      g_object_notify (G_OBJECT (entry), "hildon-input-default");
+    }
+}
+
+/**
+ * hildon_gtk_entry_get_input_default:
+ * @entry: a #GtkEntry
+ *
+ * Gets the default input mode of the widget.
+ *
+ * Return value: the default input mode of the widget.
+ *
+ * Since: maemo 5.0
+ */
+HildonGtkInputMode
+hildon_gtk_entry_get_input_default (GtkEntry *entry)
+{
+  HildonGtkInputMode mode;
+
+  g_return_val_if_fail (GTK_IS_ENTRY (entry), FALSE);
+
+  g_object_get (G_OBJECT (entry->im_context),
+		"hildon-input-default", &mode, NULL);
+
+  return mode;
+}
+
 #define __GTK_ENTRY_C__
 #include "gtkaliasdef.c"
--- a/gtk/gtkentry.h
+++ b/gtk/gtkentry.h
@@ -160,6 +160,8 @@
 
   /* Padding for future expansion */
   void (*_gtk_reserved1)      (void);
+  void (* invalid_input)      (GtkEntry            *entry,
+			       GtkInvalidInputType invalid_input_type);
   void (*_gtk_reserved2)      (void);
 };
 
@@ -329,6 +331,19 @@
 						 gboolean       editable);
 #endif /* GTK_DISABLE_DEPRECATED */
 
+const gchar *      hildon_gtk_entry_get_placeholder_text (GtkEntry *entry);
+
+void               hildon_gtk_entry_set_placeholder_text (GtkEntry    *entry,
+							  const gchar *placeholder_text);
+
+void               hildon_gtk_entry_set_input_mode (GtkEntry          *entry,
+						    HildonGtkInputMode input_mode);
+HildonGtkInputMode hildon_gtk_entry_get_input_mode (GtkEntry          *entry);
+
+void               hildon_gtk_entry_set_input_default (GtkEntry          *entry,
+						       HildonGtkInputMode input_mode);
+HildonGtkInputMode hildon_gtk_entry_get_input_default (GtkEntry *entry);
+
 G_END_DECLS
 
 #endif /* __GTK_ENTRY_H__ */
