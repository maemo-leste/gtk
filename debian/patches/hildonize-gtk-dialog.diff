--- a/gtk/gtkdialog.c
+++ b/gtk/gtkdialog.c
@@ -29,13 +29,20 @@
 #include <stdlib.h>
 #include <string.h>
 #include "config.h"
+#include "gtkalignment.h"
+#include <X11/Xlib.h>
+#include <X11/Xatom.h>
+#include "x11/gdkx.h"
 #include "gtkbutton.h"
 #include "gtkdialog.h"
 #include "gtkhbbox.h"
+#include "gtkvbbox.h"
 #include "gtklabel.h"
 #include "gtkhseparator.h"
+#include "gtkvseparator.h"
 #include "gtkmarshalers.h"
 #include "gtkvbox.h"
+#include "gtkhbox.h"
 #include "gdkkeysyms.h"
 #include "gtkmain.h"
 #include "gtkintl.h"
@@ -46,8 +53,13 @@
 
 #define GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GTK_TYPE_DIALOG, GtkDialogPrivate))
 
+/* Buttons on a HildonDialog have fixed size */
+#define HILDON_DIALOG_BUTTON_WIDTH 174
+
 typedef struct {
   guint ignore_separator : 1;
+  GtkWidget *hbox;
+  GtkWidget *alignment;
 } GtkDialogPrivate;
 
 typedef struct _ResponseData ResponseData;
@@ -75,8 +87,11 @@
                                                   GParamSpec   *pspec);
 static void      gtk_dialog_style_set            (GtkWidget    *widget,
                                                   GtkStyle     *prev_style);
+static void      gtk_dialog_size_request         (GtkWidget      *widget,
+                                                  GtkRequisition *requisition);
+static void      gtk_dialog_realize              (GtkWidget    *widget);
+static void      gtk_dialog_unrealize            (GtkWidget    *widget);
 static void      gtk_dialog_map                  (GtkWidget    *widget);
-
 static void      gtk_dialog_close                (GtkDialog    *dialog);
 
 static ResponseData * get_response_data          (GtkWidget    *widget,
@@ -101,7 +116,12 @@
 
 enum {
   PROP_0,
-  PROP_HAS_SEPARATOR
+  PROP_HAS_SEPARATOR,
+  PROP_TOP_PADDING,
+  PROP_BOTTOM_PADDING,
+  PROP_LEFT_PADDING,
+  PROP_RIGHT_PADDING,
+  PROP_INNER_SPACING,
 };
 
 enum {
@@ -131,6 +151,9 @@
   
   widget_class->map = gtk_dialog_map;
   widget_class->style_set = gtk_dialog_style_set;
+  widget_class->size_request = gtk_dialog_size_request;
+  widget_class->realize = gtk_dialog_realize;
+  widget_class->unrealize = gtk_dialog_unrealize;
 
   class->close = gtk_dialog_close;
   
@@ -151,6 +174,56 @@
                                                          FALSE,
                                                          GTK_PARAM_READWRITE | G_PARAM_DEPRECATED));
 
+  g_object_class_install_property (gobject_class,
+                                   PROP_TOP_PADDING,
+                                   g_param_spec_uint ("top-padding",
+                                                      P_("Top Padding"),
+                                                      P_("The padding to insert at the top of the dialog."),
+                                                      0,
+                                                      G_MAXUINT,
+                                                      0,
+                                                      GTK_PARAM_READWRITE | G_PARAM_CONSTRUCT));
+
+  g_object_class_install_property (gobject_class,
+                                   PROP_BOTTOM_PADDING,
+                                   g_param_spec_uint ("bottom-padding",
+                                                      P_("Bottom Padding"),
+                                                      P_("The padding to insert at the bottom of the dialog."),
+                                                      0,
+                                                      G_MAXUINT,
+                                                      8,
+                                                      GTK_PARAM_READWRITE | G_PARAM_CONSTRUCT));
+
+  g_object_class_install_property (gobject_class,
+                                   PROP_LEFT_PADDING,
+                                   g_param_spec_uint ("left-padding",
+                                                      P_("Left Padding"),
+                                                      P_("The padding to insert at the left of the dialog."),
+                                                      0,
+                                                      G_MAXUINT,
+                                                      16,
+                                                      GTK_PARAM_READWRITE | G_PARAM_CONSTRUCT));
+
+  g_object_class_install_property (gobject_class,
+                                   PROP_RIGHT_PADDING,
+                                   g_param_spec_uint ("right-padding",
+                                                      P_("Right Padding"),
+                                                      P_("The padding to insert at the right of the dialog."),
+                                                      0,
+                                                      G_MAXUINT,
+                                                      16,
+                                                      GTK_PARAM_READWRITE | G_PARAM_CONSTRUCT));
+
+  g_object_class_install_property (gobject_class,
+                                   PROP_INNER_SPACING,
+                                   g_param_spec_int ("inner-spacing",
+                                                     P_("Inner Spacing"),
+                                                     P_("The spacing between content area and action area."),
+                                                     0,
+                                                     G_MAXINT,
+                                                     16,
+                                                     GTK_PARAM_READWRITE | G_PARAM_CONSTRUCT));
+
   /**
    * GtkDialog::response:
    * @dialog: the object on which the signal is emitted
@@ -246,6 +319,11 @@
   gint content_area_spacing;
   gint button_spacing;
   gint action_area_border;
+  GtkDialogPrivate *priv = GET_PRIVATE (dialog);
+  guint top_padding;
+  guint bottom_padding;
+  guint left_padding;
+  guint right_padding;
 
   gtk_widget_style_get (GTK_WIDGET (dialog),
                         "content-area-border", &content_area_border,
@@ -253,7 +331,12 @@
                         "button-spacing", &button_spacing,
                         "action-area-border", &action_area_border,
                         NULL);
-
+  gtk_dialog_get_padding (dialog, &top_padding, &bottom_padding, &left_padding,
+                          &right_padding);
+  gtk_alignment_set_padding (GTK_ALIGNMENT (priv->alignment), top_padding,
+                             bottom_padding, left_padding, right_padding);
+  gtk_box_set_spacing (GTK_BOX (priv->hbox),
+                       gtk_dialog_get_inner_spacing (dialog));
   gtk_container_set_border_width (GTK_CONTAINER (dialog->vbox),
                                   content_area_border);
   if (!_gtk_box_get_spacing_set (GTK_BOX (dialog->vbox)))
@@ -274,6 +357,8 @@
 
   priv = GET_PRIVATE (dialog);
   priv->ignore_separator = FALSE;
+  priv->hbox = gtk_hbox_new (FALSE, 0);
+  priv->alignment = gtk_alignment_new (0.0, 0.0, 1.0, 1.0);
 
   /* To avoid breaking old code that prevents destroy on delete event
    * by connecting a handler, we have to have the FIRST signal
@@ -286,19 +371,19 @@
 
   dialog->vbox = gtk_vbox_new (FALSE, 0);
 
-  gtk_container_add (GTK_CONTAINER (dialog), dialog->vbox);
+  gtk_container_add (GTK_CONTAINER (priv->alignment), priv->hbox);
+  gtk_container_add (GTK_CONTAINER (dialog), priv->alignment);
+  gtk_widget_show (priv->hbox);
+  gtk_widget_show (priv->alignment);
   gtk_widget_show (dialog->vbox);
 
-  dialog->action_area = gtk_hbutton_box_new ();
-
+  dialog->action_area = gtk_vbutton_box_new ();
+  gtk_widget_set_name (dialog->action_area, "hildon-dialog-action-area");
   gtk_button_box_set_layout (GTK_BUTTON_BOX (dialog->action_area),
                              GTK_BUTTONBOX_END);
-
-  gtk_box_pack_end (GTK_BOX (dialog->vbox), dialog->action_area,
-                    FALSE, TRUE, 0);
+  gtk_box_pack_end (GTK_BOX (priv->hbox), dialog->action_area, FALSE, TRUE, 0);
   gtk_widget_show (dialog->action_area);
-
-  dialog->separator = NULL;
+  gtk_box_pack_end (GTK_BOX (priv->hbox), dialog->vbox, TRUE, TRUE, 0);
 
   gtk_window_set_type_hint (GTK_WINDOW (dialog),
                             GDK_WINDOW_TYPE_HINT_DIALOG);
@@ -338,14 +423,52 @@
                          GParamSpec   *pspec)
 {
   GtkDialog *dialog;
-  
+  guint padding_top;
+  guint padding_bottom;
+  guint padding_left;
+  guint padding_right;
+
   dialog = GTK_DIALOG (object);
   
+  gtk_dialog_get_padding (dialog, &padding_top, &padding_bottom, &padding_left,
+                          &padding_right);
+
   switch (prop_id)
     {
     case PROP_HAS_SEPARATOR:
       gtk_dialog_set_has_separator (dialog, g_value_get_boolean (value));
       break;
+    case PROP_TOP_PADDING:
+      gtk_dialog_set_padding (dialog,
+                              g_value_get_uint (value),
+                              padding_bottom,
+                              padding_left,
+                              padding_right);
+      break;
+    case PROP_BOTTOM_PADDING:
+      gtk_dialog_set_padding (dialog,
+                              padding_top,
+                              g_value_get_uint (value),
+                              padding_left,
+                              padding_right);
+      break;
+    case PROP_LEFT_PADDING:
+      gtk_dialog_set_padding (dialog,
+                              padding_top,
+                              padding_bottom,
+                              g_value_get_uint (value),
+                              padding_right);
+      break;
+    case PROP_RIGHT_PADDING:
+      gtk_dialog_set_padding (dialog,
+                              padding_top,
+                              padding_bottom,
+                              padding_left,
+                              g_value_get_uint (value));
+      break;
+    case PROP_INNER_SPACING:
+      gtk_dialog_set_inner_spacing (dialog, g_value_get_int (value));
+      break;
 
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -360,14 +483,36 @@
                          GParamSpec  *pspec)
 {
   GtkDialog *dialog;
-  
+  guint padding_top;
+  guint padding_bottom;
+  guint padding_left;
+  guint padding_right;
+
   dialog = GTK_DIALOG (object);
-  
+
+  gtk_dialog_get_padding (dialog, &padding_top, &padding_bottom, &padding_left,
+                          &padding_right);
+
   switch (prop_id)
     {
     case PROP_HAS_SEPARATOR:
       g_value_set_boolean (value, dialog->separator != NULL);
       break;
+    case PROP_TOP_PADDING:
+      g_value_set_uint (value, padding_top);
+      break;
+    case PROP_BOTTOM_PADDING:
+      g_value_set_uint (value, padding_bottom);
+      break;
+    case PROP_LEFT_PADDING:
+      g_value_set_uint (value, padding_left);
+      break;
+    case PROP_RIGHT_PADDING:
+      g_value_set_uint (value, padding_right);
+      break;
+    case PROP_INNER_SPACING:
+      g_value_set_int (value, gtk_dialog_get_inner_spacing (dialog));
+      break;
 
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
@@ -453,6 +598,189 @@
   update_spacings (GTK_DIALOG (widget));
 }
 
+static G_GNUC_CONST GQuark
+auto_resize_quark (void)
+{
+  static GQuark quark = 0;
+
+  if (G_UNLIKELY (quark == 0))
+    quark = g_quark_from_static_string ("gtk-dialog-widget-auto-resize");
+
+  return quark;
+}
+
+static void
+gtk_dialog_resize_button (GtkWidget *button,
+                          gpointer  *data)
+{
+  /* Only resize widgets added with gtk_dialog_add_button () */
+  if (g_object_get_qdata (G_OBJECT (button), auto_resize_quark ()))
+    {
+      gint width = GPOINTER_TO_INT (data);
+      g_object_set (button, "width-request", width, NULL);
+    }
+}
+
+static gboolean
+gtk_dialog_get_disable_portrait(GtkDialog *dialog)
+{
+  Atom actual_type;
+  int actual_format;
+  unsigned long num_items, bytes_left;
+  unsigned char *ret_data_ptr = 0,*leader_data;
+  Display * dpy = GDK_WINDOW_XDISPLAY (GTK_WIDGET(dialog)->window);
+  int error,result;
+  gboolean disable_portrait=False;
+
+  gdk_error_trap_push ();
+
+
+  result = XGetWindowProperty (dpy,
+                               GDK_WINDOW_XWINDOW (GTK_WIDGET(dialog)->window),
+                               XInternAtom(dpy,"WM_CLIENT_LEADER",False),
+                               0L, (~0L), False,
+                               XA_WINDOW, &actual_type, &actual_format, &num_items,
+                               &bytes_left, &leader_data);
+  error = gdk_error_trap_pop ();
+
+  if (error || (result != Success) || !leader_data)
+    {
+      g_warning("gtk_dialog_get_disable_portrait - unable to get window leader.");
+      return False;
+    }
+
+  gdk_error_trap_push ();
+
+  result = XGetWindowProperty(
+             dpy,
+             *(Window*)leader_data,
+             XInternAtom(dpy, "_HILDON_PORTRAIT_MODE_TASKNAV_DISABLE", False),
+             0,1/*= one 32 bits item */ ,False,
+             XA_CARDINAL, &actual_type, &actual_format, &num_items,
+             &bytes_left, &ret_data_ptr);
+
+  error = gdk_error_trap_pop ();
+
+  XFree(leader_data);
+
+  if (!error && ret_data_ptr && (result == Success))
+    {
+      disable_portrait = *((int*)ret_data_ptr);
+      XFree(ret_data_ptr);
+      return disable_portrait;
+    }
+
+  return disable_portrait;
+}
+
+static void
+gtk_dialog_screen_size_changed_cb (GdkScreen *screen,
+                                   GtkDialog *dialog)
+{
+  GtkDialogPrivate *priv = GET_PRIVATE (dialog);
+  GtkWidget *parent = gtk_widget_get_parent (dialog->action_area);
+  gint width = gdk_screen_get_width (screen);
+  gboolean portrait = width < gdk_screen_get_height (screen);
+  gint button_width, padding;
+
+  if(portrait)
+    {
+      GtkWidget *toplevel = gtk_widget_get_toplevel (GTK_WIDGET (dialog));
+
+      if (GTK_WIDGET_TOPLEVEL (toplevel) &&
+	  gtk_dialog_get_disable_portrait(GTK_DIALOG(toplevel)))
+        {
+          /* we are stuck in landscape, skip the circus */
+          return;
+        }
+    }
+
+  g_object_ref (dialog->action_area);
+  gtk_container_remove (GTK_CONTAINER (parent), dialog->action_area);
+
+  if (portrait)
+    {
+      parent = dialog->vbox;
+      button_width = width - 16 /* HILDON_MARGIN_DOUBLE */ * 2;
+      padding = 16 /* HILDON_MARGIN_DOUBLE */;
+    }
+  else
+    {
+      parent = gtk_widget_get_parent (dialog->vbox);
+      button_width = 174 /* HILDON_DIALOG_BUTTON_WIDTH */;
+      padding = 0;
+    }
+
+  gtk_box_pack_end (GTK_BOX (parent), dialog->action_area, FALSE, TRUE,
+                    padding);
+  gtk_box_reorder_child (GTK_BOX (parent), dialog->action_area, 0);
+  gtk_container_foreach (GTK_CONTAINER (dialog->action_area),
+                         (GtkCallback) gtk_dialog_resize_button,
+                         GINT_TO_POINTER (button_width));
+  g_object_unref (dialog->action_area);
+
+  if (portrait)
+    gtk_box_set_spacing (GTK_BOX (priv->hbox), padding);
+  else
+    update_spacings (dialog);
+
+  gtk_window_resize (GTK_WINDOW (dialog), 1, 1);
+}
+
+static void
+gtk_dialog_realize (GtkWidget *widget)
+{
+  GdkScreen *screen = gtk_widget_get_screen (widget);
+
+  GTK_WIDGET_CLASS (gtk_dialog_parent_class)->realize (widget);
+
+  if (gdk_screen_get_width (screen) < gdk_screen_get_height (screen))
+    gtk_dialog_screen_size_changed_cb (screen, GTK_DIALOG (widget));
+
+  g_signal_connect (screen, "size-changed",
+                    G_CALLBACK (gtk_dialog_screen_size_changed_cb), widget);
+}
+
+static void
+gtk_dialog_unrealize (GtkWidget *widget)
+{
+  GdkScreen *screen = gtk_widget_get_screen (widget);
+
+  g_signal_handlers_disconnect_by_func (
+        screen, gtk_dialog_screen_size_changed_cb, widget);
+
+  GTK_WIDGET_CLASS (gtk_dialog_parent_class)->unrealize (widget);
+}
+
+static void
+gtk_dialog_size_request (GtkWidget      *widget,
+                         GtkRequisition *requisition)
+{
+  GtkWindow *window;
+  GdkWindowTypeHint type_hint;
+
+  GTK_WIDGET_CLASS (gtk_dialog_parent_class)->size_request (widget,
+                                                            requisition);
+
+  window = GTK_WINDOW (widget);
+  type_hint = gtk_window_get_type_hint (window);
+
+  if (window->type == GTK_WINDOW_TOPLEVEL &&
+      (type_hint == GDK_WINDOW_TYPE_HINT_NORMAL ||
+       type_hint == GDK_WINDOW_TYPE_HINT_DIALOG))
+    {
+      gint width;
+
+      gtk_widget_get_size_request (widget, &width, NULL);
+
+      if (width == -1)
+        {
+          GdkScreen *screen = gtk_widget_get_screen (widget);
+          requisition->width = gdk_screen_get_width (screen);
+        }
+    }
+}
+
 static GtkWidget *
 dialog_find_button (GtkDialog *dialog,
 		    gint       response_id)
@@ -711,9 +1039,22 @@
   button = gtk_button_new_from_stock (button_text);
 
   gtk_widget_set_can_default (button, TRUE);
-  
-  gtk_widget_show (button);
-  
+
+  if (response_id != GTK_RESPONSE_CANCEL &&
+      response_id != GTK_RESPONSE_REJECT &&
+      response_id != GTK_RESPONSE_CLOSE)
+    {
+      gtk_widget_show (button);
+    }
+  else
+    gtk_widget_set_no_show_all (button, TRUE);
+
+  hildon_gtk_widget_set_theme_size (
+        button, HILDON_SIZE_AUTO_WIDTH | HILDON_SIZE_FINGER_HEIGHT);
+  g_object_set (button, "width-request", HILDON_DIALOG_BUTTON_WIDTH, NULL);
+  g_object_set_qdata (G_OBJECT (button), auto_resize_quark (),
+                      GINT_TO_POINTER (TRUE));
+
   gtk_dialog_add_action_widget (dialog,
                                 button,
                                 response_id);
@@ -877,13 +1218,14 @@
   
   if (setting && dialog->separator == NULL)
     {
-      dialog->separator = gtk_hseparator_new ();
-      gtk_box_pack_end (GTK_BOX (dialog->vbox), dialog->separator, FALSE, TRUE, 0);
+      dialog->separator = gtk_vseparator_new ();
+      gtk_box_pack_end (
+            GTK_BOX (priv->hbox), dialog->separator, FALSE, TRUE, 0);
 
       /* The app programmer could screw this up, but, their own fault.
        * Moves the separator just above the action area.
        */
-      gtk_box_reorder_child (GTK_BOX (dialog->vbox), dialog->separator, 1);
+      gtk_box_reorder_child (GTK_BOX (priv->hbox), dialog->separator, 1);
       gtk_widget_show (dialog->separator);
     }
   else if (!setting && dialog->separator != NULL)
@@ -914,6 +1256,96 @@
 }
 
 /**
+ * gtk_dialog_set_padding:
+ * @dialog: a #GtkDialog
+ * @top_padding: Padding to add at the top of the dialog.
+ * @bottom_padding: Padding to add at the bottom of the dialog.
+ * @left_padding: Padding to add at the left of the dialog.
+ * @right_padding: Padding to add at the right of the dialog.
+ *
+ * Sets additional padding around the dialog.
+ *
+ * Since: maemo 5.0
+ **/
+void
+gtk_dialog_set_padding (GtkDialog *dialog,
+                        guint      top_padding,
+                        guint      bottom_padding,
+                        guint      left_padding,
+                        guint      right_padding)
+{
+  GtkDialogPrivate *priv;
+
+  g_return_if_fail (GTK_IS_DIALOG (dialog));
+
+  priv = GET_PRIVATE (dialog);
+
+  gtk_alignment_set_padding (GTK_ALIGNMENT (priv->alignment), top_padding, bottom_padding, left_padding, right_padding);
+}
+
+/**
+ * gtk_dialog_get_padding:
+ * @dialog: a #GtkDialog
+ * @padding_top: location to store the padding for the top of the dialog, or %NULL
+ * @padding_bottom: location to store the padding for the bottom of the dialog, or %NULL
+ * @padding_left: location to store the padding for the left of the dialog, or %NULL
+ * @padding_right: location to store the padding for the right of the dialog, or %NULL
+ *
+ * Gets the padding on the different sides of the dialog.
+ *
+ * Since: maemo 5.0
+ **/
+void
+gtk_dialog_get_padding (GtkDialog *dialog,
+                        guint     *top_padding,
+                        guint     *bottom_padding,
+                        guint     *left_padding,
+                        guint     *right_padding)
+{
+  GtkDialogPrivate *priv;
+
+  g_return_if_fail (GTK_IS_DIALOG (dialog));
+
+  priv = GET_PRIVATE (dialog);
+
+  guint t, b, l, r;
+
+  gtk_alignment_get_padding (GTK_ALIGNMENT (priv->alignment), &t, &b, &l, &r);
+
+  if (top_padding)
+    *top_padding = t;
+  if (bottom_padding)
+    *bottom_padding = b;
+  if (left_padding)
+    *left_padding = l;
+  if (right_padding)
+    *right_padding = r;
+}
+
+void
+gtk_dialog_set_inner_spacing (GtkDialog *dialog,
+                              guint      inner_spacing)
+{
+  GtkDialogPrivate *priv;
+  g_return_if_fail (GTK_IS_DIALOG (dialog));
+
+  priv = GET_PRIVATE (dialog);
+
+  gtk_box_set_spacing (GTK_BOX (priv->hbox), inner_spacing);
+}
+
+guint
+gtk_dialog_get_inner_spacing (GtkDialog *dialog)
+{
+  GtkDialogPrivate *priv;
+  g_return_val_if_fail (GTK_IS_DIALOG (dialog), 0);
+
+  priv = GET_PRIVATE (dialog);
+
+  return gtk_box_get_spacing (GTK_BOX (priv->hbox));
+}
+
+/**
  * gtk_dialog_response:
  * @dialog: a #GtkDialog
  * @response_id: response ID 
--- a/gtk/gtkdialog.h
+++ b/gtk/gtkdialog.h
@@ -159,6 +159,21 @@
 gboolean gtk_dialog_get_has_separator (GtkDialog *dialog);
 #endif
 
+void     gtk_dialog_set_padding (GtkDialog *dialog,
+                                 guint      padding_top,
+                                 guint      padding_bottom,
+                                 guint      padding_left,
+                                 guint padding_right);
+void     gtk_dialog_get_padding (GtkDialog *dialog,
+                                 guint     *padding_top,
+                                 guint     *padding_bottom,
+                                 guint     *padding_left,
+                                 guint     *padding_right);
+
+void     gtk_dialog_set_inner_spacing (GtkDialog *dialog,
+                                       guint inner_spacing);
+guint gtk_dialog_get_inner_spacing (GtkDialog *dialog);
+
 gboolean gtk_alternative_dialog_button_order (GdkScreen *screen);
 void     gtk_dialog_set_alternative_button_order (GtkDialog *dialog,
 						  gint       first_response_id,
